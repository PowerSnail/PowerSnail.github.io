<?xml version="1.0" encoding="utf-8" standalone="yes"?><feed xmlns="http://www.w3.org/2005/Atom"><title>notes on SnailShell</title><link>https://powersnail.com/tags/notes/</link><link rel="self" href="https://powersnail.com/tags/notes/index.xml"/><updated>Wed, 24 Feb 2021 00:00:00 +0000</updated><id>https://powersnail.com/tags/notes/</id><author><name>PowerSnail</name></author><icon>https://powersnail.com/favicon.ico</icon><description>Recent content in notes on SnailShell</description><generator>Hugo -- gohugo.io</generator><copyright>en-us</copyright><entry><author><name>PowerSnail</name></author><title type="html">&amp;ldquo;And Then There Were None&amp;rdquo; Reading Notes</title><link rel="alternate">https://powersnail.com/2021/and-then-there-were-none/</link><published>Wed, 24 Feb 2021 00:00:00 +0000</published><updated>Wed, 24 Feb 2021 00:00:00 +0000</updated><id>https://powersnail.com/2021/and-then-there-were-none/</id><summary type="html">Summary The book was the execution of ten people, carried out on an isolated island. Ten people of very different backgrounds were invited, by various ruses, to come on to the island.</summary><content type="html">&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>The book was the execution of ten people, carried out on an isolated island. Ten people of very different backgrounds were invited, by various ruses, to come on to the island. A recorded voice blared out accusations, that each of them had committed a murder and escaped the punishment of the law. One by one, they started dying, in the same manner as described by a nursery rhyme that was carved in their bedrooms. A rich young man died by poison. The maid died by sleeping pill overdose. No one else was on the island, so the murderer must be among themselves, but despite their effort at self-preservation, the killing continued. The general was killed by the sea. The butler was chopped by an axe. The old distinguished lady was again poisoned with cyanide, while a bumblebee was present, as a symbol for bee sting. They searched for poisons and weapons, but then, the Judge was shot when they rushed to help the young lady. The doctor ran out of the house and vanished at midnight. The ex-policeman was killed by a bear-shaped clock dropped from a window. The last two, Vera the young lady, and Lombard the shady hard man, found the corpse of the doctor floating in the sea. Now that there was no other option, Vera though Lombard was the murderer. She cheated him, stole his gun, and shot him dead. Then, as she came back to her room, she was so moved by the murder, the shooting, and the guilt, she committed suicide.&lt;/p>
&lt;p>The judge was the mastermind. His death was faked by the doctor, who was convinced that faking the death would help draw out the real murderer.&lt;/p>
&lt;h1 id="head-hopping">Head Hopping&lt;/h1>
&lt;p>The book was written in 10 view points, and constantly hopping from one head to another.&lt;/p>
&lt;p>For instance,&lt;/p>
&lt;blockquote>
&lt;p>He had said it with acceptance—almost with welcome.&lt;/p>
&lt;p>But to Vera the words—the thought—brought rebellion.&lt;/p>
&lt;p>No, it should not be the end.&lt;/p>
&lt;/blockquote>
&lt;p>Despite the fact that we know the criminal is among them, and that we get to read their inner thoughts from time to time, there was still the mystery.&lt;/p>
&lt;p>The trick was that the Judge was positioned to be the authority in the very beginning, and the readers are already accustomed to his sharp judgment, when he remained composed and shrewd later. He was also very good at making deductions using only the evidence that had been presented to him, rather than leaking the fact that he knew everything all along. He misled the other nine people, in exactly the same way the author mystified the readers.&lt;/p>
&lt;p>The head hopping worked well in this book, as it shows the fear, the anxiety, the curiosity, that were presented in each mind. There were no lead detective to solve the crime; each of them were equally suspicious and suspected.&lt;/p>
&lt;h1 id="annotations">Annotations&lt;/h1>
&lt;h2 id="chapter-one">Chapter One&lt;/h2>
&lt;p>Page 3 Location 100&lt;/p>
&lt;blockquote>
&lt;p>Vera Claythorne, in a third-class carriage with five other travellers in it, leaned her head back and shut her eyes.&lt;/p>
&lt;/blockquote>
&lt;p>Page 5 Location 128&lt;/p>
&lt;blockquote>
&lt;p>Philip Lombard, summing up the girl opposite in a mere flash of his quick moving eyes thought to himself:&lt;/p>
&lt;/blockquote>
&lt;p>Page 6 Location 155&lt;/p>
&lt;blockquote>
&lt;p>In a non-smoking carriage Miss Emily Brent sat very upright as was her custom. She was sixty-five and she did not approve of lounging. Her father, a Colonel of the old school, had been particular about deportment.&lt;/p>
&lt;/blockquote>
&lt;p>Page 8 Location 184&lt;/p>
&lt;blockquote>
&lt;p>General Macarthur looked out of the carriage window. The train was just coming into Exeter, where he had to change. Damnable, these slow branch line trains! This place, Soldier Island, was really no distance at all as the crow flies.&lt;/p>
&lt;/blockquote>
&lt;p>Page 9 Location 198&lt;/p>
&lt;blockquote>
&lt;p>Dr. Armstrong was driving his Morris across Salisbury Plain. He was very tired … Success had its penalties.&lt;/p>
&lt;/blockquote>
&lt;p>Page 11 Location 221&lt;/p>
&lt;blockquote>
&lt;p>Tony Marston, roaring down into Mere, thought to himself: &amp;ldquo;The amount of cars crawling about the roads is frightful. Always something blocking your way. And they will drive in the middle of the road! Pretty hopeless driving in England, anyway…. Not like France where you really could let out….&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Page 12 Location 237&lt;/p>
&lt;blockquote>
&lt;p>Mr. Blore was in the slow train from Plymouth. There was only one other person in his carriage, an elderly seafaring gentleman with a bleary eye. At the present moment he had dropped off to sleep.&lt;/p>
&lt;/blockquote>
&lt;h2 id="chapter-two">Chapter Two&lt;/h2>
&lt;p>Page 21 Location 378&lt;/p>
&lt;blockquote>
&lt;p>Down the steep track into the village a car was coming. A car so fantastically powerful, so superlatively beautiful that it had all the nature of an apparition. At the wheel sat a young man, his hair blown back by the wind. In the blaze of the evening light he looked, not a man, but a young God, a Hero God out of some Northern Saga. He touched the horn and a great roar of sound echoed from the rocks of the bay. It was a fantastic moment. In it, Anthony Marston seemed to be something more than mortal. Afterwards more than one of those present remembered that moment.&lt;/p>
&lt;/blockquote>
&lt;h2 id="chapter-four">Chapter Four&lt;/h2>
&lt;p>Page 51 Location 842&lt;/p>
&lt;blockquote>
&lt;p>Whoever it was who enticed us here, that person knows or has taken the trouble to find out a good deal about us all.&lt;/p>
&lt;/blockquote>
&lt;h2 id="chapter-eight">Chapter Eight&lt;/h2>
&lt;p>Page 101 Location 1612&lt;/p>
&lt;blockquote>
&lt;p>He cleared his throat and said in a would-be conversational tone: &amp;ldquo;Nice peaceful spot you&amp;rsquo;ve found for yourself, sir.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h2 id="chapter-nine">Chapter Nine&lt;/h2>
&lt;p>Page 130 Location 2076&lt;/p>
&lt;blockquote>
&lt;p>Blore said: &amp;ldquo;That&amp;rsquo;s what happened. Absolutely. And that lets out the judge, Mr. Lombard, myself and Miss Claythorne.&amp;rdquo; His voice was loud and jubilant. Mr. Justice Wargrave, bringing a cold eye to bear upon him, murmured: &amp;ldquo;Ah, but does it? We must take into account every possible eventuality.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h2 id="chapter-eleven">Chapter Eleven&lt;/h2>
&lt;p>Page 149 Location 2358&lt;/p>
&lt;blockquote>
&lt;p>Philip Lombard had the habit of waking at daybreak. He did so on this particular morning. He raised himself on an elbow and listened. The wind had somewhat abated but was still blowing. He could hear no sound of rain….&lt;/p>
&lt;/blockquote>
&lt;p>Page 150 Location 2381&lt;/p>
&lt;blockquote>
&lt;p>The little party moved through the house. Rogers&amp;rsquo; room, as Philip Lombard had already ascertained, was untenanted. The bed had been slept in, and his razor and sponge and soap were wet.&lt;/p>
&lt;/blockquote>
&lt;h2 id="chapter-sixteen">Chapter Sixteen&lt;/h2>
&lt;p>Page 216 Location 3420&lt;/p>
&lt;blockquote>
&lt;p>Aeons passed … worlds spun and whirled … Time was motionless … It stood still—it passed through a thousand ages…. No, it was only a minute or so … Two people were standing looking down on a dead man…. Slowly, very slowly, Vera Claythorne and Philip Lombard lifted their heads and looked into each other&amp;rsquo;s eyes….&lt;/p>
&lt;/blockquote>
&lt;p>Page 217 Location 3440&lt;/p>
&lt;blockquote>
&lt;p>He had said it with acceptance—almost with welcome.&lt;/p>
&lt;p>But to Vera the words—the thought—brought rebellion.&lt;/p>
&lt;p>No, it should not be the end.&lt;/p>
&lt;/blockquote>
&lt;p>Page 219 Location 3468&lt;/p>
&lt;blockquote>
&lt;p>His quick brain was working. Which way—which method—talk her over—lull her into security or a swift dash—All his life Lombard had taken the risky way. He took it now. He spoke slowly, argumentatively: &amp;ldquo;Now look here, my dear girl, you just listen—&amp;rdquo; And then he sprang. Quick as a panther—as any other feline creature…. Automatically Vera pressed the trigger…. Lombard&amp;rsquo;s leaping body stayed poised in mid-spring then crashed heavily to the ground. Vera came warily forward, the revolver ready in her hand. But there was no need of caution. Philip Lombard was dead—shot through the heart….&lt;/p>
&lt;/blockquote>
&lt;p>Christie, A. (2011). And Then There Were None.&lt;/p></content><category>posts</category></entry><entry><author><name>PowerSnail</name></author><title type="html">&amp;ldquo;Pride and Prejudice&amp;rdquo; Reading Notes: Highlights and Annotations</title><link rel="alternate">https://powersnail.com/2019/price-and-prejudice-reading-notes/</link><published>Tue, 17 Sep 2019 00:00:00 +0000</published><updated>Tue, 17 Sep 2019 00:00:00 +0000</updated><id>https://powersnail.com/2019/price-and-prejudice-reading-notes/</id><summary type="html">Summary of Pride and Prejudice A young intelligent woman, Elizabeth, had a tendency to judge people quickly. Based on impressions and gossips, she deemed Mr.</summary><content type="html">&lt;h2 id="summary-of-_pride-and-prejudice_">Summary of &lt;em>Pride and Prejudice&lt;/em>&lt;/h2>
&lt;p>A young intelligent woman, Elizabeth, had a tendency to judge people quickly. Based on impressions and gossips, she deemed Mr. Darcy proud, cruel, and exploiting his friend. When Mr. Darcy expressed his affection to her, Elizabeth bashed him with criticism and sarcasm. However, after meeting Mr. Darcy and his family on a trip, she realized that she had rushed her opinions. She was misled by Mr. Wickham, whom she had deemed to be trustworthy but was actually a long-time liar. When she found out that she had misjudged so many people along the way, she confessed to Mr. Darcy: both her apologies and her own affection towards him. In the end, Mr. Darcy still loved her, and they got married.&lt;/p>
&lt;p>The storytelling was magnificent and humorous. Not only did Elizabeth misjudged the characters of people, but also I - the reader - misjudged along with her. I also thought in the beginning that Mr. Darcy was obnoxious proud. It&amp;rsquo;s the way that author manipulated the narrative, showing only Elizabeth&amp;rsquo;s perspective, that achieved this effect. There were many intelligent conversations, yet the characters were distinct. Each smart people had their own way of showing their intelligence, some by infallible arguments, some by sarcasms and jokes.&lt;/p>
&lt;h2 id="highlights-and-annotations">Highlights and Annotations&lt;/h2>
&lt;blockquote>
&lt;p>It is a truth universally acknowledged, that a single man in possession of a good fortune, must be in want of a wife.&lt;/p>
&lt;/blockquote>
&lt;p>The beginning sentence has a witty humor behind it, which set the tone of the whole book. The sort of sarcastic, smart, biting comments were often laid by the narrator, by Elizabeth, or by her father Mr. Bennet. In fact, Mr. Bennet in the most of the book was hardly a fatherly figure. His love and biases towards the daughters were apparent. However, when his least favorite daughter was potentially in danger, his worry and actions spoke for his actual feelings.&lt;/p>
&lt;p>Mr. Bennet had been an observer to the story for the majority of the book. He saw his own family and the world in a very picky lens; he did not participate in activities much; even when he did, he would take the chance to mock someone. The author might have projected herself onto this character, so she could point out ironies and mock the stupidity of people in a more engaging way.&lt;/p>
&lt;blockquote>
&lt;p>Compliments always take you by surprise, and me never.&lt;/p>
&lt;/blockquote>
&lt;p>Elizabeth inherited Mr. Bennet&amp;rsquo;s humor, but added a self-mocking element to it. She often criticized herself and laughed about herself. She sometimes makes harsh judgments against herself, and sometimes makes fun of flaws in her own personality. Compared with Mr. Bennet&amp;rsquo;s stinging sarcasm, Elizabeth was humbler, yet prouder in herself at the same time.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Pride,&amp;rdquo; observed Mary, who piqued herself upon the solidity of her reflections,&amp;ldquo;is a very common failing, Vanity and pride are different things, though the words are often used synonymously. A person may be proud without being vain. Pride relates more to our opinion of ourselves, vanity to what we would have others think of us.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Mary is the other side of the author&amp;rsquo;s voice. In contrast to how mocking was expressed through Mr. Bennet&amp;rsquo;s mouth, the serious morals were delivered by Mary the nerd.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Undoubtedly,&amp;rdquo; replied Darcy, to whom this remark was chiefly addressed, &amp;ldquo;there is a meanness in all the arts which ladies sometimes condescend to employ for captivation. Whatever bears affinity to cunning is despicable.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Mr. Darcy was also smart and not stingy on his criticisms. But he did not use the deliberate sarcasm like Mr. Bennet. Mr. Darcy was too proud of himself to spend effort in crafting witty attacks just for the sake of mocking people. He was much more blunt in his criticism, while Mr. Bennet would go through winding roads that catch people by surprise. It was not in his character to deliberately hurt people, although at this point of the book, the real detailed Mr. Darcy had yet to be shown. His remarks were not lacking of intelligence, however. It originated from his clear mind, observant nature, and his pride to not losing an argument.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;…… Everything nourishes what is strong already. But if it be only a slight, thin sort of inclination, I am convinced that one good sonnet will starve it entirely away.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;em>(said by Mr. Darcy)&lt;/em>&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Nothing is more deceitful,&amp;rdquo; said Darcy, &amp;ldquo;than the appearance of humility. It is often only carelessness of opinion, and sometimes an indirect boast.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;quot; Yes, vanity is a weakness indeed. But pride — where there is a real superiority of mind, pride will be always under good regulation.&amp;quot;&lt;/p>
&lt;/blockquote>
&lt;p>Mr. Darcy never hid his pride. He was so proud that even pride itself was to be proud of. The above quotes outlined that part of his character in clarity.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;An unhappy alternative is before you, Elizabeth. From this day you must be a stranger to one of your parents. Your mother will never see you again if you do not marry Mr. Collins, and I will never see you again if you do.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Almost anything could be seen as a joke to Mr. Bennet. He was like an old monk who had seen everything in the world, and therefore no longer find anything worthy of excitement (though he was quite disturbed later when Lydia was lost). Unlike a monk though, he loved to make fun of people.&lt;/p>
&lt;h2 id="some-non-annotated-highlights">Some Non-annotated Highlights&lt;/h2>
&lt;blockquote>
&lt;p>There are few people whom I really love, and still fewer of whom I think well. The more I see of the world, the more am I dissatisfied with it; and every day confirms my belief of the inconsistency of all human characters, and of the little dependence that can be placed on the appearance of merit or sense.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;&amp;hellip;&amp;hellip; I have had the pleasure of your acquaintance long enough to know that you find great enjoyment in occasionally professing opinions which in fact are not your own.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>He spoke of apprehension and anxiety, but his countenance expressed real security.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Reflection must be reserved for solitary hours ; whenever she was alone, she gave way to it as the greatest relief ; and not a day went by without a solitary walk, in which she might indulge in all the delight of unpleasant recollections.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Mrs. Gardiner abused her stupidity.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;But he is a liberal master, I suppose, and that in the eye of a servant comprehends every virtue.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Assistance is impossible; condolence insufferable. Let them triumph over us at a distance, and be satisfied.&amp;quot;&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>We all love to instruct, though we can teach only what is not worth knowing.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;I do not pretend to possess equal frankness with your ladyship. You may ask questions which I shall not choose to answer.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h2 id="bibliography">Bibliography&lt;/h2>
&lt;p>Austen, J. (2012). &lt;em>Pride and Prejudice&lt;/em>. Amazon Digital Services LLC.&lt;/p></content><category>posts</category></entry><entry><author><name>PowerSnail</name></author><title type="html">Reading Notes on &amp;ldquo;The Adventure of Tom Sawyer&amp;rdquo;</title><link rel="alternate">https://powersnail.com/2019/tom-sawyer-reading-notes/</link><published>Sun, 23 Jun 2019 00:00:00 +0000</published><updated>Sun, 23 Jun 2019 00:00:00 +0000</updated><id>https://powersnail.com/2019/tom-sawyer-reading-notes/</id><summary type="html">An Overall Review Tom Sawyer is a kid living in a small town, under the caring of his aunt. He was a mischievous troublemaker both at school and at home.</summary><content type="html">&lt;h2 id="an-overall-review">An Overall Review&lt;/h2>
&lt;p>Tom Sawyer is a kid living in a small town, under the caring of his aunt. He was a mischievous troublemaker both at school and at home. Wanting to be pirates, he and his friends ran off to an island and showed up later to their own funeral when the whole town thought they were dead. They had their own superstitions, about life, death, and treasures. While pursuing their ceremony of burying a dead cat, they accidentally witnessed a murder and overheard the murderer&amp;rsquo;s plan of blaming it on to a drunk old man. Haunted since, Tom eventually grew the courage to testify against the murderer, who fled the court and disappeared. Later, he and Huck accidentally witness the murderer - now with a different appearance - talking about treasures, so they followed him. While all the thrills and fears happened, Tom managed to won back Becky&amp;rsquo;s heart at school when he took her punishment. The lovers ran off during an event and were lost in a cave, again seeing the murderer who was with his treasure. When Tom and Becky were back, the town sealed the cave, unknowing that the murderer was still in there, who died in hunger and despair. Tom and Huck dug up the treasures and became two rich children.&lt;/p>
&lt;p>The story of Tom Sawyer is alien to me. I have never experienced a similar childhood, as I was never the mischievous type and neither were my friends. Growing up without having a single fight or making a single prank to my teachers, the energetic trouble making couldn&amp;rsquo;t be farther from my own experiences. Being a Chinese living in an inland city, pirate life was alien even to my imagination. Tom was bold, while I was frankly quite timid.&lt;/p>
&lt;p>Yet the story moved me. In a way, I dreamed to do things similarly. My imagination had brought me to islands, mountains, oceans, etc. I wanted to become, though not a pirate, a swordsman of some sort, who travelled around the world. When I read the book, I saw children fulfilling absurd ideals. I saw teenagers frightened by their own imagination and overcame it. I saw while taking up responsibilities, Tom and his friends still fought back the grown-up world in their own way. In a nutshell, this is a story of victory of childhood.&lt;/p>
&lt;p>The book was a breeze to read. Mark Twain&amp;rsquo;s language was simple yet effective. By stitching together short actions, he showed scenes almost like a movie would. Especially for thrilling scenes - witnessing the murder for example, the short sentences followed one by one, creating the sensation of things happening in a very fast pace.&lt;/p>
&lt;p>There were no pretentious vocabularies (in fact he devoted a whole chapter criticizing the school event of writing pretentious words) or complex sentence structures. He chose the right verbs to succinctly describe people&amp;rsquo;s behavior; he sometimes threw witty insights of the characters&amp;rsquo; minds; he used plenty of conversations which served several purposes: describing the subject, reflecting the personality and mindset of the talker, and promoting the interaction between characters.&lt;/p>
&lt;h2 id="quotes-i-liked">Quotes I Liked&lt;/h2>
&lt;h3 id="chapter-1">Chapter 1&lt;/h3>
&lt;blockquote>
&lt;p>She seldom or never looked THROUGH them for so small a thing as a boy; they were her state pair, the pride of her heart, and were built for &amp;ldquo;style,&amp;rdquo; not service—she could have seen through a pair of stove-lids just as well.&lt;/p>
&lt;/blockquote>
&lt;p>This sentence is a good example of building up a lively, vivid image without using complicated structure or vocabularies.&lt;/p>
&lt;blockquote>
&lt;p>He had a citified air about him that ate into Tom&amp;rsquo;s vitals.&lt;/p>
&lt;/blockquote>
&lt;p>&amp;ldquo;Ate into Tom&amp;rsquo;s vitals&amp;rdquo; Very vivid yet simple description of Tom&amp;rsquo;s discomfort meeting a new boy in town.&lt;/p>
&lt;h3 id="chapter-2">Chapter 2&lt;/h3>
&lt;blockquote>
&lt;p>Tom swept his brush daintily back and forth - stepped back to note the effect - added a touch here and there&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>The fluent language could just roll out of my tongue. &amp;ldquo;Swept&amp;rdquo; &amp;ldquo;stepped&amp;rdquo;, &amp;ldquo;back and forth&amp;rdquo; then &amp;ldquo;here and there&amp;rdquo;… The verbal structures gave the sentence a great eloquence.&lt;/p>
&lt;p>He described Tom&amp;rsquo;s movement in three semi-sentences, easily bringing to life the boy&amp;rsquo;s young energetic manner and the deliberate seriousness about this job.&lt;/p>
&lt;blockquote>
&lt;p>He had discovered a great law of human action, without knowing it - namely, that in order to make a man or a boy covet a thing, it is only necessary to make the thing difficult to attain. If he had been a great and wise philosopher, like the writer this book, he would now have comprehended that Work consists of whatever a body is OBLIGED to do, and that Play consists of whatever a body is not obliged to do.&lt;/p>
&lt;/blockquote>
&lt;h3 id="chapter-3">Chapter 3&lt;/h3>
&lt;blockquote>
&lt;p>This picture brought such an agony of pleasurable suffering that he worked it over and over again in his mind and set it up in new and varied lights, till he wore it threadbare.&lt;/p>
&lt;/blockquote>
&lt;h3 id="chapter-6">Chapter 6&lt;/h3>
&lt;blockquote>
&lt;p>Tom was suffering in reality, now, so handsomely was his imagination working, and so his groans had gathered quite a genuine tone.&lt;/p>
&lt;/blockquote>
&lt;h3 id="chapter-8">Chapter 8&lt;/h3>
&lt;blockquote>
&lt;p>But the elastic heart of youth cannot be compressed into one constrained shape long at a time.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Tom flung off his jacket and trousers, turned a suspender into a belt, raked away some brush behind the rotten log, disclosing a rude bow and arrow, a lath sword and a tin trumpet, and in a moment had seized these things and bounded away, barelegged, with fluttering shirt.&lt;/p>
&lt;/blockquote>
&lt;p>Although the sentence is rather long, it is readable and easily comprehended. The author used a sequence of semi-sentences to describe consecutive actions, occasionally blending in a shift of camera to the effects of the actions. The shortness of each semi-sentence ensures that the cognitive burden is low; each action is directly following the previous one, so there is no need to keep track of the overall structure; the occasional clauses tightly relate to the preceding sentence, so they don&amp;rsquo;t interrupt the flow.&lt;/p>
&lt;h3 id="chapter-9">Chapter 9&lt;/h3>
&lt;blockquote>
&lt;p>The hooting of a distant owl was all the sound that troubled the dead stillness. Tom&amp;rsquo;s reflections grew oppressive. He must force some talk.&lt;/p>
&lt;/blockquote>
&lt;h3 id="chapter-18">Chapter 18&lt;/h3>
&lt;blockquote>
&lt;p>That was Tom&amp;rsquo;s great secret - the scheme to return home with his brother pirates and attend their own funerals.&lt;/p>
&lt;/blockquote>
&lt;h3 id="chapter-21">Chapter 21&lt;/h3>
&lt;blockquote>
&lt;p>A prevalent feature in these compositions was a nursed and petted melancholy; another was a wasteful and opulent gush of &amp;ldquo;fine language&amp;rdquo;; another was a tendency to lug in by the ears particularly prized words and phrases until they were worn entirely out; and a peculiarity that conspicuously marked and marred them was the inveterate and intolerable sermon that wagged its crippled tail at the end of each and every one of them.&lt;/p>
&lt;/blockquote>
&lt;h3 id="chapter-26">Chapter 26&lt;/h3>
&lt;blockquote>
&lt;p>When they reached the haunted house there was something so weird and grisly about the dead silence that reigned there under the baking sun, and something so depressing about the loneliness and desolation of the place, that they were afraid, for a moment, to venture in.&lt;/p>
&lt;/blockquote>
&lt;h2 id="references">References&lt;/h2>
&lt;p>Twain, M. (2014). &lt;em>The Adventures of Tom Sawyer&lt;/em>. CreateSpace Independent Publishing Platform.&lt;/p></content><category>posts</category></entry><entry><author><name>PowerSnail</name></author><title type="html">Exceptional Control Flow</title><link rel="alternate">https://powersnail.com/2016/control-flow-exception/</link><published>Tue, 15 Nov 2016 00:00:00 +0000</published><updated>Tue, 15 Nov 2016 00:00:00 +0000</updated><id>https://powersnail.com/2016/control-flow-exception/</id><summary type="html">Overview A processor accesses a sequence of instructions when it operates. The transition from one to the next, is called control transfer.</summary><content type="html">&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>A processor accesses a sequence of instructions when it operates. The transition from one to the next, is called &lt;em>control transfer&lt;/em>. The sequence of transfers is called &lt;em>control flow&lt;/em>. The control flow is smooth when the transitions are always to the adjacent address. Operations such as &lt;code>jump&lt;/code>, &lt;code>call&lt;/code>, etc. will cause the control flow to be abrupt.&lt;/p>
&lt;p>There are other situations where the control flow is abruptly changed. For example, hardware timer, network packet arrival, etc. are events that have to be dealt with but not necessarily a part of the execution of the program. The system will likely deal with such situations with &lt;em>exceptional control flow&lt;/em> (ECF), a disruption to the control flow.&lt;/p>
&lt;ul>
&lt;li>Application Level ECF: inter-process &lt;em>signal&lt;/em>&lt;/li>
&lt;li>OS kernel Level ECF: context switches&lt;/li>
&lt;/ul>
&lt;h2 id="exceptions">Exceptions&lt;/h2>
&lt;h3 id="definition">Definition&lt;/h3>
&lt;p>An &lt;em>exception&lt;/em> is an abrupt change in the control flow in response to some change in the processor&amp;rsquo;s state.&lt;/p>
&lt;p>An &lt;em>event&lt;/em> is a change in the processor&amp;rsquo;s state.&lt;/p>
&lt;h3 id="exception-happening">Exception Happening&lt;/h3>
&lt;p>When the application is executing instruction $I_{curr}$, there is an event occurred.&lt;/p>
&lt;p>The event could be either caused by the instruction just occurred, or completely unrelated to the application. The processor will look up the &lt;em>exception table&lt;/em>, and make a procedure call to the &lt;em>exception handler&lt;/em>, which will process the particular kind of event. Then, depending on the event, three things can occur:&lt;/p>
&lt;ol>
&lt;li>The handler returns, to $I_{curr}$&lt;/li>
&lt;li>The handler returns, to $I_{next}$&lt;/li>
&lt;li>The handler aborts the program&lt;/li>
&lt;/ol>
&lt;h3 id="exception-handling">Exception Handling&lt;/h3>
&lt;p>The handling of exception involves both hardware and software.&lt;/p>
&lt;p>Each type of exception is assigned an integer &lt;em>exception number&lt;/em>, assigned by:&lt;/p>
&lt;ul>
&lt;li>The designer of the processor
&lt;ul>
&lt;li>divide by zero&lt;/li>
&lt;li>page faults&lt;/li>
&lt;li>memory access violations&lt;/li>
&lt;li>break-points&lt;/li>
&lt;li>arithmetic overflows&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The OS kernel
&lt;ul>
&lt;li>system calls&lt;/li>
&lt;li>signals from external I/O devices&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>At &lt;strong>Boot time&lt;/strong>, the OS creates the exception table, mapping each exception number to the address of the exception handler for the particular type of exception.&lt;/p>
&lt;p>The table&amp;rsquo;s base address is contained in a CPU register, &lt;em>exception table base register&lt;/em>.&lt;/p>
&lt;p>At &lt;strong>Run time&lt;/strong>, the processor detects the event, and determines the exception number $k$. Then it makes an indirect procedure call through the address in table[$k$].&lt;/p>
&lt;p>The procedure call is accompanied by a few operations:&lt;/p>
&lt;ul>
&lt;li>The processor pushes the address of $I_{curr}$ or $I_{next}$ on to the &lt;strong>kernel stack&lt;/strong>&lt;/li>
&lt;li>the control is transferred to the kernel, which means the exception handlers run in &lt;strong>kernel mode&lt;/strong>, that they have access to all system resources.&lt;/li>
&lt;/ul>
&lt;p>The return is a special operation &lt;code>return from interrupt&lt;/code>, which restores kernel mode to user mode.&lt;/p>
&lt;h3 id="class-of-exceptions">Class of Exceptions&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Class&lt;/th>
&lt;th>Cause&lt;/th>
&lt;th>Async/Sync&lt;/th>
&lt;th>Return behavior&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Interrupt&lt;/td>
&lt;td>Signal from I/O device&lt;/td>
&lt;td>Async&lt;/td>
&lt;td>Always returns to next instruction&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Trap&lt;/td>
&lt;td>Intentional exception&lt;/td>
&lt;td>Sync&lt;/td>
&lt;td>Always returns to next instruction&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Fault&lt;/td>
&lt;td>Potentially recoverable error&lt;/td>
&lt;td>Sync&lt;/td>
&lt;td>Might return to current instruction&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Abort&lt;/td>
&lt;td>Nonrecoverable error&lt;/td>
&lt;td>Sync&lt;/td>
&lt;td>Never returns&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Table 1: Classes of Exceptions &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>&lt;em>Async&lt;/em>: means that the event (IO Interrupt) is not caused by execution of any instruction, but rather an asynchronous signal that an external IO device sends to the processor.&lt;/p>
&lt;h4 id="interrupt-handling">Interrupt Handling&lt;/h4>
&lt;p>The handling of interrupt runs independent of the program. It is not caused by, has no impact on the current program. The processor notices the interrupt pin is set, and jumps to the interrupt handler. The handler will return to $I_{next}$, as though nothing has happened.&lt;/p>
&lt;h4 id="traps-and-system-calls">Traps and System Calls&lt;/h4>
&lt;p>Traps are intentional exceptions, likely to help interface between user program and the kernel, which is a &lt;em>system call&lt;/em>. Trap handlers also return to $I_{next}$ like interrupt handlers.&lt;/p>
&lt;p>System Calls:&lt;/p>
&lt;ul>
&lt;li>&lt;code>read&lt;/code>: file reading&lt;/li>
&lt;li>&lt;code>fork&lt;/code>: create a new process&lt;/li>
&lt;li>&lt;code>execve&lt;/code>: loading a new program&lt;/li>
&lt;li>&lt;code>exit&lt;/code>: terminating the current process&lt;/li>
&lt;/ul>
&lt;p>Remember that syscall runs in kernal mode and is thus different from normal procedure calls.&lt;/p>
&lt;h4 id="faults">Faults&lt;/h4>
&lt;p>Faults are error conditions that a handler might be able to correct. If the error is corrected, the handler will return to $I_{curr}$ (the faulting instruction), so it is re-executed. Otherwise, the handler will return to an abort routine to terminate the program&lt;/p>
&lt;h4 id="aborts">Aborts&lt;/h4>
&lt;p>Aborts result from unrecoverable fatal errors, for example, DRAM bits corruption.&lt;/p>
&lt;h3 id="example-exceptions-in-linuxx86-64-systems">Example Exceptions in Linux/x86-64 Systems&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Divide error&lt;/strong>: divide by zero, usually ends up in &lt;code>abort&lt;/code>. (Floating exceptions)&lt;/li>
&lt;li>&lt;strong>General protection fault&lt;/strong>: usually because the program references an undefined area of virtual memory, or tries to write to read-only text segment. Usually ends up in &lt;code>abort&lt;/code>. (Segmentation Fault)&lt;/li>
&lt;li>&lt;strong>Page Fault&lt;/strong>: Page of virtual memory is not resident in memory, needs to be retrieved from disk. The exception is &lt;code>fault&lt;/code>, and the handler will re-execute the faulting instruction after loading the page.&lt;/li>
&lt;li>&lt;strong>Machine check&lt;/strong>: Fatal hardware error is detected during execution of the faulting instruction. It directly goes to &lt;code>abort&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Syscalls:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Number&lt;/th>
&lt;th>Name&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>&lt;code>read&lt;/code>&lt;/td>
&lt;td>Read file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>&lt;code>write&lt;/code>&lt;/td>
&lt;td>write file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>&lt;code>open&lt;/code>&lt;/td>
&lt;td>open file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>&lt;code>close&lt;/code>&lt;/td>
&lt;td>close file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>&lt;code>stat&lt;/code>&lt;/td>
&lt;td>Get info about file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>&lt;code>mmap&lt;/code>&lt;/td>
&lt;td>map memory page to file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12&lt;/td>
&lt;td>&lt;code>brk&lt;/code>&lt;/td>
&lt;td>Reset the top the heap&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>32&lt;/td>
&lt;td>&lt;code>dup2&lt;/code>&lt;/td>
&lt;td>copy file descriptor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>33&lt;/td>
&lt;td>&lt;code>pause&lt;/code>&lt;/td>
&lt;td>suspend process until signal arrives&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>37&lt;/td>
&lt;td>&lt;code>alarm&lt;/code>&lt;/td>
&lt;td>schedule delivery of alarm signal&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>39&lt;/td>
&lt;td>&lt;code>getpid&lt;/code>&lt;/td>
&lt;td>get process ID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>57&lt;/td>
&lt;td>&lt;code>fork&lt;/code>&lt;/td>
&lt;td>create process&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>59&lt;/td>
&lt;td>&lt;code>execve&lt;/code>&lt;/td>
&lt;td>execute a program&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>60&lt;/td>
&lt;td>&lt;code>_exit&lt;/code>&lt;/td>
&lt;td>terminate process&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>61&lt;/td>
&lt;td>&lt;code>wait4&lt;/code>&lt;/td>
&lt;td>wait for a process to terminate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>62&lt;/td>
&lt;td>&lt;code>kill&lt;/code>&lt;/td>
&lt;td>send a signal to a process&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="c-and-syscalls">C and Syscalls&lt;/h3>
&lt;p>C/C++ programs can call syscall directly. For example,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;hello, world&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In syscall, the syscall ID is passed in &lt;code>%rax&lt;/code>, and arguments are passed through &lt;code>%rdi&lt;/code>, &lt;code>%rsi&lt;/code>, &lt;code>%rdi&lt;/code>, &lt;code>%r10&lt;/code>, &lt;code>%r8&lt;/code>, &lt;code>%r9&lt;/code>, in order.&lt;/p>
&lt;p>Equivalent Assembly Program&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">.section&lt;/span> &lt;span class="nv">.data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">string:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">.ascii&lt;/span> &lt;span class="s">&amp;#34;hello, world\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">string_end:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">.equ&lt;/span> &lt;span class="nv">len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">string_end&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nv">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">.section&lt;/span> &lt;span class="nv">.text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">.global&lt;/span> &lt;span class="nv">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">main:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">rax&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nv">syscall&lt;/span> &lt;span class="nv">code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nv">write&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">rdi&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nv">Arg1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nv">stdout&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="nv">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">rsi&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nv">Arg2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nv">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="nv">len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">rdx&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nv">Arg3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nv">length&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">syscall&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">rax&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nv">syscall&lt;/span> &lt;span class="nv">code&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nv">_exit&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="mi">60&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">movq&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">rdi&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nv">Arg1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nv">exist&lt;/span> &lt;span class="nv">status&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">syscall&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="processes">Processes&lt;/h2>
&lt;p>The concept of &lt;em>process&lt;/em> provides the illusion of&lt;/p>
&lt;ul>
&lt;li>our program has exclusive use of CPU and memory&lt;/li>
&lt;li>the processor executes the instructions of our program without interruption&lt;/li>
&lt;li>the code and data of the program appear to be the only objects in memory&lt;/li>
&lt;/ul>
&lt;p>A process is an instance of a program in execution. This means it includes:&lt;/p>
&lt;ul>
&lt;li>the code in memory,&lt;/li>
&lt;li>the data in memory,&lt;/li>
&lt;li>the stack of the program&lt;/li>
&lt;li>the general-purpose registers&lt;/li>
&lt;li>the program counters&lt;/li>
&lt;li>environment variables&lt;/li>
&lt;li>the set of open file descriptors&lt;/li>
&lt;/ul>
&lt;p>These states are the &lt;em>context&lt;/em> of the program.&lt;/p>
&lt;h3 id="logical-control-flow">Logical Control Flow&lt;/h3>
&lt;p>We perceive the illusionary control flow, that registers, memory, etc. are changed step by step completely according to the instruction set of our program. This control flow is called &lt;strong>Logical Control Flow&lt;/strong>.&lt;/p>
&lt;p>In reality, processes take turns to use the processor. Each process runs for a short period of time and is preempted (temporarily suspended), until the next turn.&lt;/p>
&lt;p>This short time period is called &lt;em>time slice&lt;/em>.&lt;/p>
&lt;h3 id="concurrent-flows">Concurrent Flows&lt;/h3>
&lt;p>A logical flow whose execution overlaps in time with another flow is called a concurrent flow. Two flows run &lt;em>concurrently&lt;/em>.&lt;/p>
&lt;h3 id="parallel-flows">Parallel Flows&lt;/h3>
&lt;p>The concurrent flows that run on different processor cores or computers are called &lt;em>parallel flows&lt;/em>.&lt;/p>
&lt;h3 id="private-address-space">Private Address Space&lt;/h3>
&lt;p>The illusion that the program has exclusive use of address space is provided by &lt;em>private address space&lt;/em>. This &amp;ldquo;space&amp;rdquo; of addresses cannot be read/written by other programs, and therefore is exclusive to the program.&lt;/p>
&lt;h3 id="user-mode-vs-kernel-mode">User Mode vs Kernel Mode&lt;/h3>
&lt;p>The OS restricts each process what instructions can be executed and what memory space can be accessed. The processor provides the capability with a &lt;code>mode bit&lt;/code>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;code>mode bit&lt;/code>&lt;/th>
&lt;th>Mode&lt;/th>
&lt;th>Instruction&lt;/th>
&lt;th>Memory Space&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Kernel Mode&lt;/td>
&lt;td>Any Instruction&lt;/td>
&lt;td>Any Memory&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>User Mode&lt;/td>
&lt;td>No Privileged Instruction&lt;/td>
&lt;td>No reference to code/data in kernel area&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Privileged Instruction: &lt;code>syscall&lt;/code> functions, including halt, change mode, I/O op, etc.&lt;/p>
&lt;h4 id="proc">/proc&lt;/h4>
&lt;p>&lt;code>/proc&lt;/code> is a Linux file system mount of the kernal data structure. It allows the user to access general system attributes.&lt;/p>
&lt;h3 id="context-switch">Context Switch&lt;/h3>
&lt;p>The kernel maintains a context for each process. The context is the state that the kernel needs to restart a preempted process.&lt;/p>
&lt;ul>
&lt;li>Values of general-purpose registers,&lt;/li>
&lt;li>floating-point registers&lt;/li>
&lt;li>program counter&lt;/li>
&lt;li>user&amp;rsquo;s stack&lt;/li>
&lt;li>status registers&lt;/li>
&lt;li>kernel&amp;rsquo;s stack&lt;/li>
&lt;li>various kernel data structure
&lt;ul>
&lt;li>page table&lt;/li>
&lt;li>process table&lt;/li>
&lt;li>file table&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Scheduling&lt;/strong>, deciding to preempt a process and restart a preempted process. This is handled by &lt;strong>scheduler&lt;/strong>, a code in the kernel.&lt;/p>
&lt;p>The kernel can decide to switch when the process is waiting for a read. The IO device can take care of the work, so the kernel will switch to another process, until the IO device sends an interrupt signalling successful transfer of data into the memory.&lt;/p>
&lt;h2 id="system-call-error-handling">System Call Error Handling&lt;/h2>
&lt;p>When a system level function encounter an error, they return $-1$, and set the global integer variable &lt;code>errno&lt;/code> to indicate what went wrong.&lt;/p>
&lt;p>An error checking fork function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">unix_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%s: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strerror&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">errno&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pid_t&lt;/span> &lt;span class="nf">Fork&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid_t&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fork&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// &amp;lt;- check for error return value
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">unix_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Fork error&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="signals">Signals&lt;/h2>
&lt;p>A signal is a small message that notifies a process that an event of some type has occurred in the system.&lt;/p>
&lt;h3 id="sending-signal">Sending Signal&lt;/h3>
&lt;p>The kernel sends a signal because:&lt;/p>
&lt;ul>
&lt;li>the kernel detects a system event&lt;/li>
&lt;li>a process invoked &lt;code>kill&lt;/code> function&lt;/li>
&lt;/ul>
&lt;h4 id="process-group">Process Group&lt;/h4>
&lt;p>Each process belongs to exactly one process group. By default, a child process belongs to the same group as its parent.&lt;/p>
&lt;p>The Process Group ID can be read/write using &lt;code>getpgrp&lt;/code> and &lt;code>setpgid&lt;/code>.&lt;/p>
&lt;h4 id="binkill">&lt;code>/bin/kill&lt;/code>&lt;/h4>
&lt;p>&lt;code>/bin/kill -9 15213&lt;/code> sends a signal 9 (SIGKILL) to process 15213.&lt;/p>
&lt;p>&lt;code>/bin/kill -9 -15213&lt;/code> sends a signal 9 to ever process in group 15213&lt;/p>
&lt;h4 id="from-keyboard">from Keyboard&lt;/h4>
&lt;p>A Unix shell has at most 1 foreground job and zero or more background jobs. Typing &lt;kbd>ctrl&lt;/kbd> + &lt;kbd>c&lt;/kbd> causes the kernel to send SIGINT to every process in the foreground process group. &lt;kbd>ctrl&lt;/kbd> + &lt;kbd>z&lt;/kbd> sends SIGTSTP signal to every process in the foreground process group, which pauses them.&lt;/p>
&lt;h4 id="calling-kill-function">Calling &lt;code>kill&lt;/code> function&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;signal.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">kill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pid_t&lt;/span> &lt;span class="n">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sig&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If :&lt;/p>
&lt;ul>
&lt;li>&lt;code>pid&lt;/code> &amp;gt; 0, send &lt;code>sig&lt;/code> to process[&lt;code>pid&lt;/code>]&lt;/li>
&lt;li>&lt;code>pid&lt;/code> = 0, send &lt;code>sig&lt;/code> to process group that current process belongs&lt;/li>
&lt;li>&lt;code>pid&lt;/code> &amp;lt; 0, send &lt;code>sig&lt;/code> to process group [|&lt;code>pid&lt;/code>|]&lt;/li>
&lt;/ul>
&lt;h4 id="calling-alarm-function">Calling &lt;code>alarm&lt;/code> function&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">alarm&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">secs&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Arranges the kernel to send SIGALRM signal to the calling process in &lt;code>secs&lt;/code> seconds. If secs == 0, then no new alarm is scheduled.&lt;/p>
&lt;p>It returns the remaining seconds of previous alarm.&lt;/p>
&lt;p>A call of &lt;code>alarm&lt;/code> cancels all previous &lt;code>alarm&lt;/code>s.&lt;/p>
&lt;h3 id="receiving-signal">Receiving Signal&lt;/h3>
&lt;p>The kernel checks for any &lt;em>pending and not blocked&lt;/em> signals, when switching a process from kernel mode to user mode, i.e. from an Interrupt, syscall, or context switching.&lt;/p>
&lt;p>If there is no such signals, then it will proceed to $I_{next}$. Otherwise, the kernel will choose a signal and force the process to receive it. The receipt will trigger some action, and once the action is completed, the kernel proceeds to $I_{next}$.&lt;/p>
&lt;p>There is a default action associated with each signal; the user program can change it by using a &lt;code>signal&lt;/code> function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;signal.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">sighandler_t&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sighandler_t&lt;/span> &lt;span class="nf">signal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">signum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sighandler_t&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then &lt;code>handler&lt;/code> can be SIG_IGN (ignore), SIG_DFL (default), or the address of a user-defined function, a *signal handler.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Figure 8.5, CSAPP&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content><category>posts</category></entry><entry><author><name>PowerSnail</name></author><title type="html">Code Optimizations</title><link rel="alternate">https://powersnail.com/2016/optimization/</link><published>Tue, 08 Nov 2016 00:00:00 +0000</published><updated>Tue, 08 Nov 2016 00:00:00 +0000</updated><id>https://powersnail.com/2016/optimization/</id><summary type="html">An example: Transpose
for i in rows for j in cols b[i][j] = a[j][i]However, it might be the case that we do not know the size at compilation time, so we cannot statically declare this 2D array.</summary><content type="html">&lt;p>An example: &lt;strong>Transpose&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">rows&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">cols&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">][&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, it might be the case that we do not know the size at &lt;em>compilation time&lt;/em>, so we cannot statically declare this 2D array. Therefore, for this to work, &lt;code>b[i][j]&lt;/code> needs to be a pointer to an array.&lt;/p>
&lt;p>To optimize, we use a 1-D array by flattening the table:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to make this statement more readable, we define a macro:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># define RIDX(i, j, N) (i * N + j)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This macro will do a pure text replacement that replace all occurrence of &lt;code>RIDX(i, j, N)&lt;/code> by &lt;code>(i * N + j)&lt;/code>.&lt;/p>
&lt;p>For readability, let us assume that we can write &lt;code>b[i, j]&lt;/code> for this.&lt;/p>
&lt;h3 id="which-one-is-better">Which one is better?&lt;/h3>
&lt;p>&lt;code>b[i, j] = a[j, i]&lt;/code> vs. &lt;code>b[j, i] = a[i, j]&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Temporal Locality&lt;/th>
&lt;th>Spacial Locality&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>b[i, j]&lt;/code>&lt;/td>
&lt;td>No&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a[j, i]&lt;/code>&lt;/td>
&lt;td>No&lt;/td>
&lt;td>No&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b[j, i]&lt;/code>&lt;/td>
&lt;td>No&lt;/td>
&lt;td>No&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a[i, j]&lt;/code>&lt;/td>
&lt;td>No&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>So, either is bad.&lt;/p>
&lt;p>In order to optimize this function, we need to do something else.&lt;/p>
&lt;p>If we try to visualize the 2D array:&lt;/p>
&lt;p>For the cache lines, when we read &lt;code>a[0, 0]&lt;/code>, the next few numbers will be put into the same line. But when we read &lt;code>b&lt;/code>, we will be adding another cache line each time, as we jump across rows. If the array is big enough that we cannot put every row of &lt;code>b&lt;/code> into the cache lines. However, if the size is &lt;strong>small&lt;/strong> enough, we can start each cache lines aligned with each row, and therefore take advantage of spatial locality.&lt;/p>
&lt;p>We are going to use this to our advantage. We access each submatrix of the larger matrix, and transpose them one block a time. Because blocks are small, we enjoy the benefit of spatial locality if we pick the size smartly.&lt;/p>
&lt;p>After the block-wise transpose, each block is of the right order, and we enjoyed spatial locality.&lt;/p>
&lt;p>Note that for each block, the destination is still the desired position and therefore, when block-wise operation is done, the whole array is already transposed.&lt;/p>
&lt;h3 id="right-size-of-block-size">Right size of block size&lt;/h3>
&lt;p>If &lt;code>block.size&lt;/code> is one (operation), this is meaningless
if &lt;code>block.size&lt;/code> is $N$, this is also meaningless.&lt;/p>
&lt;p>&lt;strong>Good!&lt;/strong>: &lt;code>block.size&lt;/code> = $k \times ${cache line size}$&lt;/p>
&lt;p>&lt;em>NOTE: although it is not possible to optimize the performance without benchmarking on the machine, we can generally optimize it based on some trials.&lt;/em>&lt;/p>
&lt;h3 id="implementation">Implementation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">each&lt;/span> &lt;span class="n">block&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">each&lt;/span> &lt;span class="n">cell&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># do something&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In valid C language, this looks like&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">B_i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">B_i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">B_i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">B_j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">B_j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">B_j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">B_i&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">B_i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">B_size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">B_j&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">B_j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">B_j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">B_size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="how-is-this-better">How is this better?&lt;/h3>
&lt;p>If we only look at the inner loop, it still looks like we do not have spatial locality for at least one query. However, because of blocking, all information are in cache and locality does not matter anymore.&lt;/p>
&lt;h3 id="loop-variables">Loop variables&lt;/h3>
&lt;p>&lt;code>B_j + B_size&lt;/code> is run every time with the loop.
If we use a variable to store the value, the performance will increase.&lt;/p>
&lt;h2 id="compiler-optimizations">Compiler Optimizations&lt;/h2>
&lt;h3 id="disadvantage">Disadvantage&lt;/h3>
&lt;ol>
&lt;li>Not changing semantics&lt;/li>
&lt;li>Limited Contact&lt;/li>
&lt;li>Conservative Heuristics
&lt;ul>
&lt;li>A *Guess Work**&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>For example,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">a&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will be optimized.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">float&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1e50&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mf">1e50&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will not be optimized. Because this will actually result in &lt;code>c = 0&lt;/code> instead of &lt;code>c = 1&lt;/code> as in optimized code.&lt;/p>
&lt;h2 id="loop-unrolling">Loop Unrolling&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">Loop:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">cmp&lt;/span> &lt;span class="nv">%rdi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rax&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">jeg&lt;/span> &lt;span class="no">End&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">addq&lt;/span> &lt;span class="nv">%rdi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rsi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">irmovq&lt;/span> &lt;span class="no">$1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rcx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">add&lt;/span> &lt;span class="nv">%rcx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%rdi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">jmp&lt;/span> &lt;span class="no">Loop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">End:&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Only 2/5 of the operations are doing the actual work! The bookkeeping is taking a great portion of our time.&lt;/p>
&lt;p>The simple solution is to put more operations into the loop:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Caveat&lt;/strong>: the unrolled loop operations might exceed &lt;code>N&lt;/code>, therefore we need to change the boundary: &lt;code>for (int i = 0; i &amp;lt; N - 2; )&lt;/code>.&lt;/p>
&lt;p>If &lt;code>N&lt;/code> is big, this should not hurt the performance overall. The advantage of unrolling loops will be more important.&lt;/p>
&lt;p>&lt;strong>Unrolling Too Much&lt;/strong>: instruction cache miss (But this is unlikely, as it would take quite a number of unrolling to do that)&lt;/p>
&lt;h2 id="function-inlining">Function Inlining&lt;/h2>
&lt;ul>
&lt;li>Difficulty 1: Moving arguments into the right place.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Caller/Callee Convention&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>%rax&lt;/code> is a caller saved register. Before calling the subroutine, the caller need to push &lt;code>%rax&lt;/code> onto the stack, and pop it afterwards. So that the callee can change &lt;code>%rax&lt;/code> as he wants.&lt;/p>
&lt;/blockquote>
&lt;p>These are tedious work to store register values. In order to avoid this, we inline functions.&lt;/p>
&lt;p>For example,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// doing something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We place the content of &lt;code>strlen&lt;/code> before x, saving the return value as a variable and replace the call with the variable.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// doing something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">ans&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">retVal&lt;/span> &lt;span class="c1">// instead of return
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">ans&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content><category>posts</category></entry><entry><author><name>PowerSnail</name></author><title type="html">Fractals</title><link rel="alternate">https://powersnail.com/2016/fractals/</link><published>Tue, 08 Nov 2016 00:00:00 +0000</published><updated>Tue, 08 Nov 2016 00:00:00 +0000</updated><id>https://powersnail.com/2016/fractals/</id><summary type="html">Fractal naming: fractional dimension
Definition: self-similar $$\to$ when zoomed in, look the same
Types: Exactly self-similar Statistically self-similar Exactly Self-similar If zoomed in, there is no way to tell that we have zoomed in.</summary><content type="html">&lt;h1 id="fractal">Fractal&lt;/h1>
&lt;p>naming: fractional dimension&lt;/p>
&lt;h2 id="definition">Definition:&lt;/h2>
&lt;p>self-similar $$\to$ when zoomed in, look the same&lt;/p>
&lt;h2 id="types">Types:&lt;/h2>
&lt;ol>
&lt;li>Exactly self-similar&lt;/li>
&lt;li>Statistically self-similar&lt;/li>
&lt;/ol>
&lt;h2 id="exactly-self-similar">Exactly Self-similar&lt;/h2>
&lt;p>If zoomed in, there is no way to tell that we have zoomed in.&lt;/p>
&lt;h3 id="sierpinski-carpet">Sierpinski Carpet&lt;/h3>
&lt;p>&lt;img src="https://fractalfoundation.org/OFCA/Sierpinski_carpet.jpg" alt="Sierpinski Carpet" loading="lazy" width="600" height="600" >&lt;/p>
&lt;ul>
&lt;li>A square divided into 9 squares&lt;/li>
&lt;li>The center square is empty&lt;/li>
&lt;li>Each other square is divided again&lt;/li>
&lt;/ul>
&lt;h3 id="koch-snowflake">Koch Snowflake&lt;/h3>
&lt;p>&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Koch_Snowflake_7th_iteration.svg/2000px-Koch_Snowflake_7th_iteration.svg.png" alt="Koch Snowflake" loading="lazy" width="2000" height="2000" >&lt;/p>
&lt;ul>
&lt;li>Chop the lines into 3 Segments&lt;/li>
&lt;li>replace the middle one with equal lateral triangle&lt;/li>
&lt;li>Chop and replace each segment&lt;/li>
&lt;/ul>
&lt;p>The important property is that when we zoom in on an edge, it is arbitrarily &amp;ldquo;bumpy&amp;rdquo; - non-smooth. This is similar to things like shorelines. There is a self-similarity in natural shorelines.&lt;/p>
&lt;p>However, shorelines are not as bumpy as Koch Snowflakes. They are smoother. Hence, we need a concept to describe the bumpiness.&lt;/p>
&lt;h3 id="length-of-koch-snowflake">Length of Koch Snowflake&lt;/h3>
&lt;p>Each Step increases the length to $$\dfrac{4}{3} \times$ original. Hence, Koch Snowflake is infinitely long.&lt;/p>
&lt;p>$$l_k = \dfrac{4}{3} l_{k-1}$&lt;/p>
&lt;p>Question: How quickly does Koch Snowflake&amp;rsquo;s length converge to infinity?&lt;/p>
&lt;h3 id="measuring-length-of-fractal-line">Measuring Length of Fractal Line&lt;/h3>
&lt;p>Different measuring scales lead to different length.&lt;/p>
&lt;p>From the starting point, jump a fixed distance, $$d_u$, and measure how many $d_u$ are there in the line.&lt;/p>
&lt;p>Each different $$d_u$ results in a unique length, and as $d_u$ approaches 0, the length measured approaches $\infty$&lt;/p>
&lt;p>The scale is related to length and this function describes the bumpiness of a fractal line. This is called &lt;strong>Fractal Dimension&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>&lt;em>Higher&lt;/em> Fractal Dimension means more &lt;em>bumpiness&lt;/em>&lt;/li>
&lt;li>&lt;em>Lower&lt;/em> Fractal Dimension means less &lt;em>bumpiness&lt;/em>&lt;/li>
&lt;/ul>
&lt;h3 id="shorelinemountain-topology">Shoreline/Mountain Topology&lt;/h3>
&lt;p>Use fractal dimension to model a bumpy line, and computationally derive the line, rather than describing more details.&lt;/p>
&lt;h2 id="statistically-self-similar">Statistically Self-similar&lt;/h2>
&lt;p>Recursive Tree: &lt;strong>Tree&lt;/strong> := Stick + &lt;strong>Tree&lt;/strong> + &lt;strong>Tree&lt;/strong>&lt;/p>
&lt;p>Moreover, we need to take care of the angles, length and returning position.&lt;/p>
&lt;p>It becomes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">- Stick
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Turn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Tree -&amp;gt; this will expand to the same routine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Turn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Tree -&amp;gt; this will expand to the same routine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Turn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Backwards&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="l-system">L-System&lt;/h3>
&lt;p>The above process can be described by CFG:&lt;/p>
&lt;p>$$T:S\leftarrow T \rightarrow \rightarrow T \leftarrow \overline{S}$&lt;/p>
&lt;p>This use of CFG is called L-System.&lt;/p>
&lt;h3 id="improvement-to-l-system-tree">Improvement to L-System Tree&lt;/h3>
&lt;ul>
&lt;li>Randomness : This introduces &lt;strong>Statistically similar&lt;/strong> fractal image.&lt;/li>
&lt;/ul>
&lt;p>The sub-parts are statistically similar to the original image, but not exactly the same.&lt;/p>
&lt;p>To create a nice tree, it is important to examine each tree. There is a &lt;strong>grammar&lt;/strong> to each type of tree, describing its patterns.&lt;/p>
&lt;p>However, sadly trees don&amp;rsquo;t grow by the fractal model.&lt;/p>
&lt;h2 id="incorporating-randomness-into-fractals">Incorporating Randomness Into Fractals&lt;/h2>
&lt;p>Example Algorithm (&lt;em>Subdivide and Offset&lt;/em>)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">repeat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> foreach segment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> offset midpoint for random distance
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hence create two segments&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>deeper repetition: bumpier&lt;/li>
&lt;/ul>
&lt;p>More sophisticated examples:&lt;/p>
&lt;h3 id="height-map">Height Map&lt;/h3>
&lt;p>A raster vector of height&lt;/p>
&lt;ul>
&lt;li>Can represent any terrain with no overlapping height (not bumpy topology, water, etc.)&lt;/li>
&lt;li>Cannot represent extremely rocky terrain&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Diamond Square&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Diamond_Square.svg/2998px-Diamond_Square.svg.png" alt="Level 0" loading="lazy" width="2998" height="640" >&lt;/p>
&lt;ul>
&lt;li>Level 0: Four corners set to $$h = 0$&lt;/li>
&lt;li>Level 1: Mid-point $$m_1$ set to $h_1 += random$&lt;/li>
&lt;li>Level 2: Point on Edges aligned with $$m_1$, offset randomly&lt;/li>
&lt;li>Level 3: Mid-point of each sub-square, offset randomly&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>The result could look something like:&lt;/p>
&lt;p>&lt;img src="https://upload.wikimedia.org/wikipedia/commons/9/96/Plasmafractal.gif" alt="Diamond Square" loading="lazy" width="300" height="225" >&lt;/p>
&lt;p>The problem is the grid pattern is visible. There are &amp;lsquo;+&amp;rsquo; in the graph, so rotating the graph will be noticed (not entirely natural)&lt;/p>
&lt;p>&lt;strong>Solution&lt;/strong>: Use&lt;/p>
&lt;p>&lt;strong>Applications&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>NOT good for terrain. Natural terrain has very few local minima. The minima will drain, and become global minima. This is not reflected by diamond square subdivision.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Clouds. Clouds density is similar to the patterns generated from diamond square subdivision.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dirt. This could create &amp;ldquo;dirty&amp;rdquo; texture to human-created objects.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="perlin-fractal">Perlin Fractal&lt;/h3>
&lt;p>A perlin fractal is created by taking in a height map, downsize it, and fill itself with the small height map.&lt;/p></content><category>posts</category></entry><entry><author><name>PowerSnail</name></author><title type="html">Gradient Detection Convolutions, Seam Carving, and Patch March</title><link rel="alternate">https://powersnail.com/2016/image-manipulation/</link><published>Thu, 03 Nov 2016 00:00:00 +0000</published><updated>Thu, 03 Nov 2016 00:00:00 +0000</updated><id>https://powersnail.com/2016/image-manipulation/</id><summary type="html">Gradient detection convolutions Square instead of rectangle: to avoid problems concerning diagonal
usually 3 x 3 edge detection apply gradient detection convolution find where gradient appears / \ / \ / \ / \ | | | | _____________________________ &amp;lt;- at this line, the gradient is extreme ****************************** ****************************** ****************************** find maximum gradient points edge is perpendicular to gradients Segmentation: Intelligent Scissors INPUT: a set of points OUTPUT: find a path(curve) that is following edge as much as possible</summary><content type="html">&lt;h2 id="gradient-detection-convolutions">Gradient detection convolutions&lt;/h2>
&lt;p>Square instead of rectangle: to avoid problems concerning diagonal&lt;/p>
&lt;ul>
&lt;li>usually 3 x 3&lt;/li>
&lt;/ul>
&lt;h2 id="edge-detection">edge detection&lt;/h2>
&lt;ul>
&lt;li>apply gradient detection convolution&lt;/li>
&lt;li>find where gradient appears&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> / \ / \ / \ / \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _____________________________ &amp;lt;- at this line, the gradient is extreme
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ******************************
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ******************************
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ******************************&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>find maximum gradient points&lt;/li>
&lt;li>edge is perpendicular to gradients&lt;/li>
&lt;/ul>
&lt;h2 id="segmentation-intelligent-scissors">Segmentation: Intelligent Scissors&lt;/h2>
&lt;p>INPUT: a set of points
OUTPUT: find a path(curve) that is following edge as much as possible&lt;/p>
&lt;p>This is a graph traversal problem. Each pixel has some neighbors, and we choose points based on gradient at each point.&lt;/p>
&lt;p>ALGORITHM&lt;/p>
&lt;ul>
&lt;li>treat the picture as a graph&lt;/li>
&lt;li>each pixel is connected to neighboring pixels&lt;/li>
&lt;li>cost minimization
&lt;ul>
&lt;li>cost = 1 - gradient // higher gradient, better to choose&lt;/li>
&lt;li>optionally, cost for diagonal is higher, etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>simply adding up cost of each step&lt;/li>
&lt;/ul>
&lt;h2 id="segmentation-k-means">Segmentation: k-means&lt;/h2>
&lt;p>automatic algorithm: k neighbor&lt;/p>
&lt;p>It finds pixels that are close in color-space &amp;amp; geometry, and connect them. By tweaking the weight of adjacency and color-space closeness, we can have different results. This can be used in color reduction. It reduces the amount of gradient exists in the graph.&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Image_segmentation">Segmentation&lt;/a>&lt;/p>
&lt;h2 id="image-processing-algorithms-machine-learning">Image Processing Algorithms: Machine Learning&lt;/h2>
&lt;h3 id="machine-learning-model">Machine Learning Model&lt;/h3>
&lt;p>A black box, that takes in independent and dependent vars, and output a function that describes the relationship between those.&lt;/p>
&lt;p>$$Black-Box(x, y) \to y = f(x)$$&lt;/p>
&lt;h3 id="in-image-processing">In Image Processing&lt;/h3>
&lt;ul>
&lt;li>Independent var: features of the image&lt;/li>
&lt;li>Dependent var: classification(is it a dog?)&lt;/li>
&lt;/ul>
&lt;p>To find features, we try to find patterns of gradient in the image.&lt;/p>
&lt;p>There are parts of the image that are more informative than others. It contains patterns that are robust against small changes. It will be stable across different images sharing the same pattern, despite small differences.&lt;/p>
&lt;p>This could be represented by:&lt;/p>
&lt;ul>
&lt;li>maxima of gradient&lt;/li>
&lt;li>area of gradient turns&lt;/li>
&lt;/ul>
&lt;p>These are works for feature detection algorithms.&lt;/p>
&lt;p>For example, a gray box.&lt;/p>
&lt;p>This is easily identified, because the right angles of the square corners are a robust feature. The change in gradient pattern is consistent in different images.&lt;/p>
&lt;h2 id="seam-carving">Seam Carving&lt;/h2>
&lt;ul>
&lt;li>INPUT: Image&lt;/li>
&lt;li>OUTPUT: Smaller image, that does not look distorted.&lt;/li>
&lt;/ul>
&lt;p>Requirement:&lt;/p>
&lt;ul>
&lt;li>focus objects are in frame&lt;/li>
&lt;li>no obvious distortion&lt;/li>
&lt;li>only boring parts are cut off&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Seam_carving">Seam Carving&lt;/a>&lt;/p>
&lt;p>Use magnitude of gradient to approximate the &amp;ldquo;interestingness&amp;rdquo;.&lt;/p>
&lt;ul>
&lt;li>large gradient: an object -&amp;gt; interest&lt;/li>
&lt;li>low gradient: same across image -&amp;gt; less information&lt;/li>
&lt;/ul>
&lt;p>In order to get a better estimate, we might need to blur the image a little bit.&lt;/p>
&lt;p>&lt;em>NOTE: the reason that the gradient image on Wikipedia has squares is because JPEG compression&lt;/em>&lt;/p>
&lt;p>&lt;strong>How to decide what to remove?&lt;/strong>&lt;/p>
&lt;p>In order to narrow an image for 1 pixel, every row needs to be smaller by 1 pixel.&lt;/p>
&lt;ol>
&lt;li>For each row, pick the least interesting pixel&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>[FAILED]&lt;/li>
&lt;li>line shifts, and the image will be distorted&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>Select one vertical line&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>[FAILED]&lt;/li>
&lt;li>This will create a visible vertical line of discontinuous&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>Make sure that pixels removed are &lt;em>adjacent&lt;/em> to each other&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>[CORRECT]&lt;/li>
&lt;li>After selecting one pixel, select one of the 3 pixels below it.&lt;/li>
&lt;li>Pick first pixel:
&lt;ul>
&lt;li>dynamic programming&lt;/li>
&lt;li>minimize cost from first row to each pixel of the next row&lt;/li>
&lt;li>for each pixel, we have a &lt;code>prev&lt;/code>, and a minimized accumulative cost&lt;/li>
&lt;li>at the last row, find the smallest accumulative cost, and follow the &lt;code>prev&lt;/code>s back up to generate the path to be cut.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Enlarging the image with the same algorithm&lt;/strong>&lt;/p>
&lt;p>Duplicate paths, from the lowest cost path to higher ones in the &lt;strong>original image&lt;/strong>.&lt;/p>
&lt;p>But this is less well-defined. Because we need to add details, there are many complications. The one rule is not to duplicate the same path over and over again.&lt;/p>
&lt;h2 id="patch-march">Patch March&lt;/h2>
&lt;ul>
&lt;li>look at the hole&amp;rsquo;s boundary&lt;/li>
&lt;li>find patches in the image that matches the best with the boundary&amp;rsquo;s patches&lt;/li>
&lt;li>fill the area with the patches inwards&lt;/li>
&lt;/ul>
&lt;h3 id="find-one-patch">find one patch&lt;/h3>
&lt;ul>
&lt;li>||patch - image||&lt;/li>
&lt;li>||patch.gradient - image.gradient||&lt;/li>
&lt;/ul>
&lt;h3 id="the-whole-hole">the whole hole&lt;/h3>
&lt;p>It is only after the hole is filled, do we know whether this is done well.&lt;/p>
&lt;p>It works well when there are plenty of similar patterns, it will work well.&lt;/p>
&lt;p>Removing a part of a critical component, nose from the face for example, cannot work.&lt;/p>
&lt;h3 id="random-selection-of-patches">random selection of patches&lt;/h3>
&lt;p>Randomly replacing patches with better patches, until the whole patched area is smoothly integrated.&lt;/p>
&lt;p>Because there are too many choices, we use randomized search to iteratively improve the patch quality.&lt;/p>
&lt;p>Heuristics, for example interpolated color gradient, can be used as an initial guess.&lt;/p>
&lt;p>Another improvement could be giving the algorithm more images to draw patches from.&lt;/p>
&lt;h3 id="applications">applications&lt;/h3>
&lt;ul>
&lt;li>remove whole persons from the scene&lt;/li>
&lt;li>replace a person from the scene&lt;/li>
&lt;/ul>
&lt;h3 id="computer-detection-of-tempering">computer detection of tempering&lt;/h3>
&lt;ul>
&lt;li>Although human cannot see some anomalies, computers can detect them&lt;/li>
&lt;li>3D Geometric features:
&lt;ul>
&lt;li>shadow length / light source angle&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content><category>posts</category></entry><entry><author><name>PowerSnail</name></author><title type="html">Production of Sentences and Properties of Languages: Parsing Techniques Notes (2)</title><link rel="alternate">https://powersnail.com/2016/parsing-techniques-notes02/</link><published>Fri, 26 Feb 2016 00:00:00 +0000</published><updated>Fri, 26 Feb 2016 00:00:00 +0000</updated><id>https://powersnail.com/2016/parsing-techniques-notes02/</id><summary type="html">Generating Sentences sentence vs. sentential sentence all symbols belongs to terminals (a valid element of the language) sentential may contain non-terminals, an intermediate form during sentence production Example: For a language where $V_N = {P, Q} \land V_T = {a, b, c, d}$, a valid sentential would be $aP$; a valid sentence would be $ac$.</summary><content type="html">&lt;h2 id="generating-sentences">Generating Sentences&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>sentence &lt;em>vs.&lt;/em> sentential&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>sentence&lt;/td>
&lt;td>all symbols belongs to terminals (a valid element of the language)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sentential&lt;/td>
&lt;td>may contain non-terminals, an intermediate form during sentence production&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="example">Example:&lt;/h4>
&lt;p>For a language where $V_N = {P, Q} \land V_T = {a, b, c, d}$, a valid sentential would be $aP$; a valid sentence would be $ac$.&lt;/p>
&lt;h3 id="type-0-and-type-1-cs-languages">Type 0 and Type 1 (CS) Languages&lt;/h3>
&lt;p>&lt;strong>Breadth-first Production&lt;/strong>: for each sentential, make copies of it for each applicable rule. Then, repeat the operation on each copy. If there is no &lt;em>non-terminal&lt;/em> in the sentential, it is then a sentence, and could be printed and discarded in the production.&lt;/p>
&lt;p>This process may be infinitely long, but it is guaranteed that an arbitrary sentence will definitely be produced.&lt;/p>
&lt;h4 id="two-remarks-about-cs-language-sentence-production">Two Remarks about CS Language Sentence Production&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>We cannot decide whether a CS language is empty, i.e. whether its rules could produce a sentence. &lt;br> The process takes infinite time, and therefore is &lt;em>undecidable&lt;/em>.&lt;/p>
&lt;ul>
&lt;li>It is possible to prove a CS language being non-empty by giving an example of sentence it generates.&lt;/li>
&lt;li>It is impossible to prove a CS language is empty.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>General parsing of CS language is &lt;em>unsolvable&lt;/em>. We cannot produce a list of sentences in a CS language in order by length. Because it is context-sensitive, the length of the sentence could &amp;ldquo;shrink&amp;rdquo; suddenly and unpredictably. &lt;br> As a result, we cannot determine a sentence is not in the language; there is always possibility that it may show up in further production.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Type 0 language has the same properties.&lt;/p>
&lt;h3 id="type-2-cf-language">Type 2 (CF) Language&lt;/h3>
&lt;p>Monotonic nature of CF language means that the length of sentence will not &amp;ldquo;shrink&amp;rdquo;. Therefore, we could solve the two problems of CS language by a rather simple algorithm:&lt;/p>
&lt;ol>
&lt;li>Scan rules that have terminal on right-hand side,&lt;/li>
&lt;li>marking those as productive;&lt;/li>
&lt;li>scan rules that have productive on right-hand side,&lt;/li>
&lt;li>repeat 2, 3 until meeting the start symbol or no new productive symbols could be found&lt;/li>
&lt;/ol>
&lt;p>If the above process is able to reach the start symbol then it is not empty; otherwise, it finds no way up to the start symbol, the language is empty.&lt;/p>
&lt;p>The length of sentence does not shrink in CF language. Therefore, we could determine a sentence&amp;rsquo;s existence. If we meet the sentence obviously, it belongs to the language. If we keep producing and exceed the length of the sentence, then further production on the sentential will definitely not produce the sentence. We could therefore decide the inclusion of an arbitrary sentence of finite length in finite time.&lt;/p>
&lt;h3 id="type-3-regular-language">Type 3 (Regular) Language&lt;/h3>
&lt;p>Regular language has rules that right-hand side contains at most one non-terminal, and it should be the rightmost symbol. Regular language could be written as regular expressions that is composed of only terminals and regular operators. As a result, if a non-empty regular expression could be constructed, then the language is non-empty.&lt;/p>
&lt;p>It is also possible to enumerate sentences without breath-first production, as only one non-terminal could be replaced in each sentential. When looking for a sentence $K$ of length $l$, if the length of sentential exceeds $l$, then $K$ cannot be included in the language. Finding any sentence in the process would prove that the language is not empty.&lt;/p>
&lt;!-- page --></content><category>posts</category></entry><entry><author><name>PowerSnail</name></author><title type="html">Generative Grammar and Four Types of Grammars: Parsing Techniques Notes (1)</title><link rel="alternate">https://powersnail.com/2016/parsing-techniques-notes01/</link><published>Wed, 24 Feb 2016 00:00:00 +0000</published><updated>Wed, 24 Feb 2016 00:00:00 +0000</updated><id>https://powersnail.com/2016/parsing-techniques-notes01/</id><summary type="html">Generative Grammar There are several views of defining a language. The computer science and formal linguistics perspective:
terms definition Language a set of sentences Sentence a sequence of symbols Alphabet a set of all symbols The semantics - meaning - of a sentence is described by its tokens cooperating with its structure.</summary><content type="html">&lt;h2 id="generative-grammar">Generative Grammar&lt;/h2>
&lt;p>There are several views of defining a language. The computer science and formal linguistics perspective:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>terms&lt;/th>
&lt;th>definition&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Language&lt;/td>
&lt;td>a set of sentences&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sentence&lt;/td>
&lt;td>a &lt;strong>sequence&lt;/strong> of symbols&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alphabet&lt;/td>
&lt;td>a set of all symbols&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The semantics - meaning - of a sentence is described by its tokens cooperating with its structure.&lt;/p>
&lt;p>Grammar is the set of rules describing a language.
&lt;strong>Generative Grammar&lt;/strong> is&lt;/p>
&lt;ul>
&lt;li>exact&lt;/li>
&lt;li>fixed-sized&lt;/li>
&lt;/ul>
&lt;h3 id="language-can-be-specified-by-infinite-bit-string">Language can be specified by infinite Bit-String&lt;/h3>
&lt;p>Sorted Alphabet: $\Sigma$
Language $\Sigma^{* }$ contains all combinations of symbols in $\Sigma$&lt;/p>
&lt;p>The order of sentences in $\Sigma^* $ follows that:&lt;/p>
&lt;p>&lt;em>from length $l = 0$&lt;/em>&lt;/p>
&lt;ol>
&lt;li>Enumerate all combinations that of length $l$&lt;/li>
&lt;li>these combinations are listed according to alphabetical order (lexicographical sorting)&lt;/li>
&lt;li>increment $l$ and repeat from 1.&lt;/li>
&lt;/ol>
&lt;p>This will form an infinitely long sorted list. Every language composed by alphabet $\Sigma$ can be identified by choosing from $\Sigma^* $. If we encode this by binary representation, 0 → not including, 1 → including, we can create an infinitely long bit string that indicates every sentence the language contains.&lt;/p>
&lt;blockquote>
&lt;p>For example:
Language $L = 010010110&amp;hellip;$&lt;/p>
&lt;/blockquote>
&lt;h3 id="formal-grammar">Formal Grammar&lt;/h3>
&lt;p>Recipe of replacing symbols:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">Name -&amp;gt; tom | dick | harry // Name may be replaced by tom, dick or harry
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A grammar is a &lt;em>4-tuple&lt;/em> $(V_N, V_T, R, S)$:&lt;/p>
&lt;ul>
&lt;li>$V_N$ non-terminals, $V_T$ terminals are finite sets of symbols&lt;/li>
&lt;li>$V_N \cap V_T = \varnothing$ terminals and non-terminals cannot have common symbols&lt;/li>
&lt;li>$R$ is the set of rules, a set that contains ordered pairs: ${(P, Q) \mid P\in (V_N\cup V_T)^+ \land Q\in (V_N \cup V_T)^* }$&lt;/li>
&lt;li>$S$ is the start symbol, $S\in V_N$&lt;/li>
&lt;/ul>
&lt;h2 id="four-types-of-grammars">Four types of Grammars&lt;/h2>
&lt;h3 id="type-0-phrase-structure-grammar-ps-grammar">Type 0: Phrase Structure Grammar (PS Grammar)&lt;/h3>
&lt;p>Most freedom. Follows &lt;em>4-tuple&lt;/em> $(V_N, V_T, R, S)$, without further restriction.
Represented as &lt;code>Directed Acyclic Graph&lt;/code>: No cycle exists&lt;/p>
&lt;h3 id="type-1-context-sensitive-grammar-cs-grammar">Type 1: Context-Sensitive Grammar (CS Grammar)&lt;/h3>
&lt;p>There are two equivalent definitions: &lt;code>Monotonic&lt;/code> and &lt;code>Context-Sensitive&lt;/code>.
Can be represented by a DAG, similar to PS Grammar.&lt;/p>
&lt;h4 id="monotonic">Monotonic&lt;/h4>
&lt;p>For each rule, left-hand side has more or equal number of symbols to right-hand side.&lt;/p>
&lt;h4 id="context-sensitive">Context-Sensitive&lt;/h4>
&lt;p>Every rule is context-sensitive.&lt;/p>
&lt;ul>
&lt;li>Left-hand side contains only one symbol to be changed in the right-hand side.&lt;/li>
&lt;/ul>
&lt;h3 id="type-2-context-free-grammar-cf-grammar">Type 2: Context-Free Grammar (CF Grammar)&lt;/h3>
&lt;p>LHS could only contain one non-terminal symbol. (Thus not related to neighboring symbols).
Represented by a tree, as branches of a node is not relevant to other nodes.&lt;/p>
&lt;p>The generative power of CF Grammar comes from two operations:&lt;/p>
&lt;ul>
&lt;li>Concatenation&lt;/li>
&lt;li>Choice (choosing from one of the alternatives in the RHS)&lt;/li>
&lt;/ul>
&lt;p>&lt;code>NT -&amp;gt; tom | NT dick | ...&lt;/code>&lt;/p>
&lt;h3 id="type-3-regular-grammar">Type 3: Regular Grammar&lt;/h3>
&lt;p>Mostly referring to &lt;code>right regular grammar&lt;/code>.
Each rule could only contain one non-terminal, as the rightmost item.
Represented by a list, because each sentential has only one replaceable item (non-terminal), or in a production chain.&lt;/p>
&lt;p>All regular grammar can be expressed in a regular expression, which sufficiently equal to all rules in the grammar.&lt;/p>
&lt;p>Regular Expression Notation Styles:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Notation&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$^{+ }$&lt;/td>
&lt;td>One or more instances of the left-adjacent item&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$^{* }$&lt;/td>
&lt;td>Zero or more instances of the left-adjacent item&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$^{? }$&lt;/td>
&lt;td>Zero or one instance of the left-adjacent item&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$[abc]$&lt;/td>
&lt;td>Choosing one from $(a, b, c)$, i.e., $(a\mid b\mid c)$&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Example:&lt;/p>
&lt;p>$S_S\to(([tdh],)^{* }[tdh] &amp;amp; )^{? }[tdh]$&lt;/p>
&lt;h3 id="type-4-finite-choice-grammar-fc-grammar">Type 4: Finite Choice Grammar (FC Grammar)&lt;/h3>
&lt;p>Each rule could have only terminals in right-hand side.
Very limited expressive power.&lt;/p></content><category>posts</category></entry></feed>