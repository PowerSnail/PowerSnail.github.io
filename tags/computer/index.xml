<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Computer on SnailShell</title>
  <link>https://powersnail.com/tags/computer/</link><link rel="self" href="https://powersnail.com/tags/computer/index.xml"></link><updated>Mon, 21 Oct 2024 00:00:00 +0000</updated>
  <id>https://powersnail.com/tags/computer/</id>

  <author>
    <name>PowerSnail</name>
  </author>

  <icon>https://powersnail.com/favicon.ico</icon>

  <description>Recent content in Computer on SnailShell</description>
  <generator>Hugo -- gohugo.io</generator>
  <copyright>en-us</copyright>
  
  <entry>
    <author>
      <name>PowerSnail</name>
    </author>
    <title type="html">&lt;code&gt;tmux&lt;/code&gt; - Edit the Current Pane in Neovim</title>
    <link rel="alternate">https://powersnail.com/2024/tmux-edit-in-neovim/</link>
    <published>Mon, 21 Oct 2024 00:00:00 +0000</published>
    <updated>Mon, 21 Oct 2024 00:00:00 +0000</updated>
    
    <id>https://powersnail.com/2024/tmux-edit-in-neovim/</id>
    <summary type="html">TL;DR: I put the following lines into my .tmux.conf:
# Edit current pane in neovim bind e run &amp;#34;tmux capture-pane -S 0 -p -J &amp;gt; /tmp/tmux-edit &amp;amp;&amp;amp; tmux new-window &amp;#39;nvim /tmp/tmux-edit&amp;#39;&amp;#34; bind E run &amp;#34;tmux capture-pane -S - -p -J &amp;gt; /tmp/tmux-edit &amp;amp;&amp;amp; tmux new-window &amp;#39;nvim /tmp/tmux-edit&amp;#39;&amp;#34; Navigation in Neovim ## tmux and neovim are essential parts of my workflow, both of which are very good at being worked on with keyboard only.</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: I put the following lines into my &lt;code&gt;.tmux.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Edit current pane in neovim&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; e run &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmux capture-pane -S 0 -p -J &amp;gt; /tmp/tmux-edit &amp;amp;&amp;amp; tmux new-window &amp;#39;nvim /tmp/tmux-edit&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; E run &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmux capture-pane -S - -p -J &amp;gt; /tmp/tmux-edit &amp;amp;&amp;amp; tmux new-window &amp;#39;nvim /tmp/tmux-edit&amp;#39;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;navigation-in-neovim&#34;&gt;
  Navigation in Neovim
  &lt;a href=&#34;#navigation-in-neovim&#34;&gt;&lt;small&gt;##&lt;/small&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tmux&lt;/code&gt; and &lt;code&gt;neovim&lt;/code&gt; are essential parts of my workflow, both of which are very good at being worked on with keyboard only.&lt;/p&gt;
&lt;p&gt;Having recently invested in &lt;code&gt;neovim&lt;/code&gt; plugins like &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-jump2d.md&#34;&gt;mini.jump2d&lt;/a&gt; and &lt;a href=&#34;https://github.com/ggandor/leap.nvim&#34;&gt;leap.nvim&lt;/a&gt;, I find myself increasingly spoiled. These two plugins, in slightly different ways, provide the capability of moving the cursor to where you are looking at, by identifying that location with a few key strokes. The premise is that if you have somewhere you want the cursor to go, it&amp;rsquo;s likely you are already staring at it, so let&amp;rsquo;s show some labels all around the buffer, and you can type the label right at the destination. &lt;em&gt;leap.nvim&lt;/em&gt; does it by having you type a 2-gram, while &lt;em&gt;mini.jump2d&lt;/em&gt; enumerating locations such as word boundaries, etc.&lt;/p&gt;
&lt;p&gt;The mechanism are better demonstrated by their own docs, but essentially for me, it&amp;rsquo;s like semi-auto eyeball tracking. This kind of navigation might not give you the path of fewest number of keystrokes, but it requires the least amount cognitive load in my experience (compared to reading relative line numbers for example), because it incurs very little context switching in my mind.&lt;/p&gt;
&lt;h2 id=&#34;tweaking-tmux&#34;&gt;
  Tweaking tmux
  &lt;a href=&#34;#tweaking-tmux&#34;&gt;&lt;small&gt;##&lt;/small&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Newly spoiled, I find the experience of moving around in &lt;code&gt;tmux&lt;/code&gt;&amp;rsquo;s copy mode increasingly lacking. I habitually type &lt;code&gt;s&lt;/code&gt; (my binding to &lt;code&gt;leap.nvim&lt;/code&gt;) when I&amp;rsquo;m in &lt;code&gt;tmux&lt;/code&gt;, while staring into the target position waiting for my key stroke hints to show up, as if waving a credit card at tip jar. I want to replicate the leaps and jumps everywhere in the terminal, especially in &lt;code&gt;tmux&lt;/code&gt;. (In fact, I want my entire GUI screen to do this as well: show me all clickable/focusable areas, with a label that I can navigate to; but that&amp;rsquo;s a different story.)&lt;/p&gt;
&lt;p&gt;Instead of trying to replicate the capability in &lt;code&gt;tmux&lt;/code&gt;&amp;mdash;which probably is not only difficult, but also unlikely to provide a 100% identical experience&amp;mdash;I looked for a shortcut, like any respectable lazy engineer would do: I&amp;rsquo;ll just open the current pane in &lt;code&gt;neovim&lt;/code&gt;. This way, I don&amp;rsquo;t have to re-invent the wheel and only have to configure my navigation once in one place.&lt;/p&gt;
&lt;p&gt;In the end, all that needs to be done is a two-line configuration in &lt;code&gt;.tmux.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Edit current pane in neovim&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; e run &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmux capture-pane -S 0 -p -J &amp;gt; /tmp/tmux-edit &amp;amp;&amp;amp; tmux new-window &amp;#39;nvim /tmp/tmux-edit&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;bind&lt;/span&gt; E run &lt;span class=&#34;s2&#34;&gt;&amp;#34;tmux capture-pane -S - -p -J &amp;gt; /tmp/tmux-edit &amp;amp;&amp;amp; tmux new-window &amp;#39;nvim /tmp/tmux-edit&amp;#39;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some explanations [@marriottTmux1LinuxManual2024]:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tmux capture-pane&lt;/code&gt; gets the content of the current pane;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-J&lt;/code&gt; unwraps line breaks created by &lt;code&gt;tmux&lt;/code&gt;, this makes stuff like URL, string literals more greppable and more copyable.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt; pipes it to &lt;code&gt;stdout&lt;/code&gt;, which gets piped into &lt;code&gt;/tmp/tmux-edit&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux new-window &#39;nvim /tmp/tmux-edit&#39;&lt;/code&gt; runs neovim in a new tmux window.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-S&lt;/code&gt; specifies the line at which the capture starts; &lt;code&gt;0&lt;/code&gt; is the topmost visible line, while &lt;code&gt;-&lt;/code&gt; is the topmost line in the pane&amp;rsquo;s history. With this, I created two variants of the command: lowercase &lt;kbd&gt;e&lt;/kbd&gt; is bound to capturing the currently visible lines, which I use the most; and capital &lt;kbd&gt;E&lt;/kbd&gt; is bound to capturing the entire history.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
    &lt;img
    src=&#34;https://powersnail.com/2024/tmux-edit-in-neovim/illustration-tmux-neovim.svg&#34; alt=&#34;A sketch that illustrates the concept of this configuration&#34; width=&#34;926.0425818640132&#34;  height=&#34;588.4711867724441&#34; style=&#34;max-width: 100%; height: auto&#34; width=&#34;926.0425818640132&#34;  height=&#34;588.4711867724441&#34; &gt;

    &lt;figcaption&gt;Diagram: Piping tmux pane to neovim&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;h2 id=&#34;room-for-improvements&#34;&gt;
  Room for Improvements
  &lt;a href=&#34;#room-for-improvements&#34;&gt;&lt;small&gt;##&lt;/small&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;One, this is not going to work if I try to edit two panes at the same time. A more elegant solution is to create a uniquely-named temp file in place of &lt;code&gt;/tmp/tmux-edit&lt;/code&gt;, but that takes away the simplicity of the solution, as we&amp;rsquo;ll have to deal with quoting &amp;amp; escaping of quotation marks inside a shell command, inside an argument to &lt;code&gt;tmux new-window&lt;/code&gt; inside a shell command inside &lt;code&gt;tmux&lt;/code&gt; configuration file, while making sure that the filename variable is expanding at the right stage. It is not going to be fun. I&amp;rsquo;ll settle with no concurrency for now.&lt;/p&gt;
&lt;p&gt;Two, &lt;code&gt;neovim&lt;/code&gt; doesn&amp;rsquo;t necessarily do too well with very, very long lines, and it is entirely possible that somewhere in the pane history, I &lt;code&gt;cat&lt;/code&gt; some minified file by accident.&lt;/p&gt;
</content>
    <category>posts</category>
  </entry>
  
  <entry>
    <author>
      <name>PowerSnail</name>
    </author>
    <title type="html">My Config File for Downloading Albums from YouTube Music</title>
    <link rel="alternate">https://powersnail.com/2023/youtube-music-album-download/</link>
    <published>Sun, 19 Feb 2023 00:00:00 +0000</published>
    <updated>Sun, 19 Feb 2023 00:00:00 +0000</updated>
    
    <id>https://powersnail.com/2023/youtube-music-album-download/</id>
    <summary type="html">The Config File ## Here&amp;rsquo;s the config file:
# yt-dlp.conf # Output format: album/tracks.format -o &amp;#34;%(album,playlist_title)U - [%(playlist_id)s]/%(track_number,playlist_index)s - %(title)U - [%(id)s].</summary>
    <content type="html">&lt;h2 id=&#34;the-config-file&#34;&gt;
  The Config File
  &lt;a href=&#34;#the-config-file&#34;&gt;&lt;small&gt;##&lt;/small&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s the config file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# yt-dlp.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Output format: album/tracks.format&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-o &lt;span class=&#34;s2&#34;&gt;&amp;#34;%(album,playlist_title)U - [%(playlist_id)s]/%(track_number,playlist_index)s - %(title)U - [%(id)s].%(ext)s&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--windows-filenames 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# --restrict-filenames &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Extract audio&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-f bestaudio
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--extract-audio
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Thumbnail squared&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--convert-thumbnails png
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--ppa &lt;span class=&#34;s2&#34;&gt;&amp;#34;ThumbnailsConvertor+ffmpeg_o:-c:v png -vf crop=\&amp;#34;&amp;#39;if(gt(ih,iw),iw,ih)&amp;#39;:&amp;#39;if(gt(iw,ih),ih,iw)&amp;#39;\&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--embed-thumbnail
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Metadata, with playlist number as track number if the latter is missing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--embed-metadata
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--parse-metadata &lt;span class=&#34;s2&#34;&gt;&amp;#34;playlist_index:%(track_number)s&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Misc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--no-overwrites
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--concurrent-fragments &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-explanation&#34;&gt;
  The Explanation
  &lt;a href=&#34;#the-explanation&#34;&gt;&lt;small&gt;##&lt;/small&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;h3 id=&#34;output-formats&#34;&gt;
  Output formats.
  &lt;a href=&#34;#output-formats&#34;&gt;&lt;small&gt;###&lt;/small&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;The files are organized into one-directory-per-album, like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── Bach, J.S.： Sonatas &amp;amp; Partitas - [OLAK5uy_nd-ZT5mVVQ4tFm_6FsJWbj-u6GypaFYe8]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── 01 - J.S. Bach： Sonata for Violin Solo No. 1 in G Minor, BWV 1001 - I. Adagio - [ZePaXgWY7-Q].opus
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── 02 - J.S. Bach： Sonata for Violin Solo No. 1 in G Minor, BWV 1001 - II. Fuga. Allegro - [93p59vL87cE].opus
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── 03 - J.S. Bach： Sonata for Violin Solo No. 1 in G Minor, BWV 1001 - III. Siciliana - [BRssao79MDM].opus
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── 04 - J.S. Bach： Sonata for Violin Solo No. 1 in G Minor, BWV 1001 - IV. Presto - [NP_LSvkqLjg].opus
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── 05 - J.S. Bach： Partita for Violin Solo No. 1 in B Minor, BWV 1002 - Ia. Allemanda - [4C8pA-8Hy8Q].opus
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── 06 - J.S. Bach： Partita for Violin Solo No. 1 in B Minor, BWV 1002 - Ib. Double - [vy43_64aax8].opus
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── 07 - J.S. Bach： Partita for Violin Solo No. 1 in B Minor, BWV 1002 - IIa. Corrente - [yiHc8-quDIc].opus
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The output template: &lt;code&gt;&amp;quot;%(album,playlist_title)U - [%(playlist_id)s]/%(track_number,playlist_index)s - %(title)U - [%(id)s].%(ext)s&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%(album,playlist_title)U&lt;/code&gt; tells &lt;code&gt;yt-dlp&lt;/code&gt; to use the album&amp;rsquo;s name, and if that does not exist, use the playlist&amp;rsquo;s title, the trailing &amp;ldquo;U&amp;rdquo; indicating that the string should be normalized.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%(track_number,playlist_index)s&lt;/code&gt; means that the file name begins with the track number, which makes it easier to sort the files, if the file manager or app is not metadata-aware.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%(title)U&lt;/code&gt; is the title normalized.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%(ext)s&lt;/code&gt; is the extension.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%(id)s&lt;/code&gt; and &lt;code&gt;%(playlist_id)s&lt;/code&gt; are the unique ID that YouTube assigns to the file and the playlist respectively, which might be useful if later I need to get more data from YouTube.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sanitizing filenames&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--restrict-filenames&lt;/code&gt; sanitizes the string of illegal characters. Some file systems support more characters than others, so in theory, it makes sense to err on the side of caution. However, this flag replaces all non-ASCII characters and even special ASCII characters with underscores, which is way too aggressive. While it makes file systems very happy, (an incompatibility is basically impossible), all titles, except the pure English ones, get mangled. &amp;ldquo;Dvořák&amp;rdquo; becomes &amp;ldquo;Dvor_k&amp;rdquo;, &amp;ldquo;Ysaÿe&amp;rdquo; now read &amp;ldquo;Ysa_e&amp;rdquo;, and some titles started making funny faces: &lt;code&gt;-___-&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--windows-filenames&lt;/code&gt; does exactly what it says on the tin: it makes the string Windows-compatible. I&amp;rsquo;d prefer if it is a little bit more aggressive, for instance, removing &lt;code&gt;&amp;amp;&lt;/code&gt; which some cloud drives don&amp;rsquo;t support, but it&amp;rsquo;s a good enough trade-off.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;metadata&#34;&gt;
  Metadata
  &lt;a href=&#34;#metadata&#34;&gt;&lt;small&gt;###&lt;/small&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;--embed-metadata&lt;/code&gt; tells &lt;code&gt;yt-dlp&lt;/code&gt; to embed metadata. Some albums don&amp;rsquo;t have the proper track number set up, which means that when you import the files into a music player, the order of the album gets scrambled up.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--parse-metadata &amp;quot;playlist_index:%(track_number)s&amp;quot;&lt;/code&gt; uses the playlist index, which should always be present when downloading a playlist, to fill the track number.&lt;/p&gt;
&lt;h3 id=&#34;thumbnails&#34;&gt;
  Thumbnails
  &lt;a href=&#34;#thumbnails&#34;&gt;&lt;small&gt;###&lt;/small&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--embed-thumbnail&lt;/code&gt; tells &lt;code&gt;yt-dlp&lt;/code&gt; to embed a thumbnail;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--convert-thumbnails png&lt;/code&gt; indicates that the format of the thumbnail should be &lt;code&gt;png&lt;/code&gt;. &lt;code&gt;webp&lt;/code&gt; is possibly the best image format available in &lt;code&gt;yt-dlp&lt;/code&gt;, but its popularity being so recent, I&amp;rsquo;m wary of its compatibility with music players. Either &lt;code&gt;png&lt;/code&gt; or &lt;code&gt;jpeg&lt;/code&gt; should be fine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By default, YouTube provides a padded, rectangular image. To cut off the padding, we can use &lt;code&gt;ffmpeg&lt;/code&gt; in post-processing. In this &lt;a href=&#34;https://github.com/yt-dlp/yt-dlp/issues/429&#34;&gt;Github Issue&lt;/a&gt;, pukkandan(2021) gave a solution: &lt;code&gt;--ppa &amp;quot;EmbedThumbnail+ffmpeg_o:-c:v mjpeg -vf crop=\&amp;quot;&#39;if(gt(ih,iw),iw,ih)&#39;:&#39;if(gt(iw,ih),ih,iw)&#39;\&amp;quot;&amp;quot;&lt;/code&gt;. But on my machine, &lt;code&gt;yt-dlp&lt;/code&gt; seems to ignore this instruction. Even with &lt;code&gt;--verbose&lt;/code&gt; turned on, I could see no log about cropping the thumbnail, and if I mangle the command deliberately, no error is produced, either. All I get is the same padded rectangular image in the end.&lt;/p&gt;
&lt;p&gt;According to &lt;code&gt;yt-dlp&lt;/code&gt;&amp;rsquo;s README:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Supported PP are: Merger, ModifyChapters, SplitChapters, ExtractAudio, VideoRemuxer, VideoConvertor, Metadata, EmbedSubtitle, &lt;strong&gt;EmbedThumbnail&lt;/strong&gt;, SubtitlesConvertor, &lt;strong&gt;ThumbnailsConvertor&lt;/strong&gt;, FixupStretched, FixupM4a, FixupM3u8, FixupTimestamp and FixupDuration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;EmbedThumbnail&lt;/code&gt; and &lt;code&gt;ThumbnailsConvertor&lt;/code&gt; must be the two relevant options, so I gave the latter a try: &lt;code&gt;--ppa &amp;quot;ThumbnailsConvertor+ffmpeg_o:-c:v png -vf crop=\&amp;quot;&#39;if(gt(ih,iw),iw,ih)&#39;:&#39;if(gt(iw,ih),ih,iw)&#39;\&amp;quot;&amp;quot;&lt;/code&gt;. And, &lt;em&gt;hooray&lt;/em&gt;, it works!&lt;/p&gt;
&lt;p&gt;My guess is that there&amp;rsquo;s some sort of conflict amongst the sequence of converting the image to the right format, embedding the image, and post-processing the image. In a way, I think it makes sense that thumbnail convertor post processor is the right option here, as it implies that we are processing &lt;strong&gt;after the conversion&lt;/strong&gt; and &lt;strong&gt;before the embedding&lt;/strong&gt;, whereas post-processing &lt;code&gt;EmbedThumbnail&lt;/code&gt; would suggest that we are cropping after the embedding occurs, which would be rather not useful. But this is just a speculation. Without digging into the code, it&amp;rsquo;s impossible to tell what exactly is happening here.&lt;/p&gt;
&lt;h3 id=&#34;miscellaneous&#34;&gt;
  Miscellaneous
  &lt;a href=&#34;#miscellaneous&#34;&gt;&lt;small&gt;###&lt;/small&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;--no-overwrites&lt;/code&gt;: Don&amp;rsquo;t overwrite files.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--concurrent-fragments 4&lt;/code&gt;: Download 4 fragments concurrently to speed up the process.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;
  References
  &lt;a href=&#34;#references&#34;&gt;&lt;small&gt;##&lt;/small&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;pukkandan. (2021, June 23). &lt;em&gt;Comment on [Feature Request] Crop to square thumbnail when embedding in MP3s&lt;/em&gt;. &lt;a href=&#34;https://github.com/yt-dlp/yt-dlp/issues/429#issuecomment-866836396&#34;&gt;[Feature Request] Crop to square thumbnail when embedding in MP3s · Issue #429 · yt-dlp/yt-dlp · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;yt-dlp. (2023). &lt;em&gt;Yt-dlp&lt;/em&gt; [Python]. yt-dlp. &lt;a href=&#34;https://github.com/yt-dlp/yt-dlp&#34;&gt;GitHub - yt-dlp/yt-dlp: A youtube-dl fork with additional features and fixes&lt;/a&gt; (Original work published 2020)&lt;/p&gt;
</content>
    <category>posts</category>
  </entry>
  
</feed>
