<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<feed xmlns="http://www.w3.org/2005/Atom">
  <title>graphics on SnailShell</title>
  <link>https://powersnail.com/tags/graphics/</link><link rel="self" href="https://powersnail.com/tags/graphics/index.xml"></link><updated>Tue, 08 Nov 2016 00:00:00 +0000</updated>
  <id>https://powersnail.com/tags/graphics/</id>

  <author>
    <name>PowerSnail</name>
  </author>

  <icon>https://powersnail.com/favicon.ico</icon>

  <description>Recent content in graphics on SnailShell</description>
  <generator>Hugo -- gohugo.io</generator>
  <copyright>en-us</copyright>
  
  <entry>
    <author>
      <name>PowerSnail</name>
    </author>
    <title type="html">Fractals</title>
    <link rel="alternate">https://powersnail.com/2016/fractals/</link>
    <published>Tue, 08 Nov 2016 00:00:00 +0000</published>
    <updated>Tue, 08 Nov 2016 00:00:00 +0000</updated>
    
    <id>https://powersnail.com/2016/fractals/</id>
    <summary type="html">Fractal naming: fractional dimension
Definition: self-similar $$\to$ when zoomed in, look the same
Types: Exactly self-similar Statistically self-similar Exactly Self-similar If zoomed in, there is no way to tell that we have zoomed in.</summary>
    <content type="html">&lt;h1 id=&#34;fractal&#34;&gt;Fractal&lt;/h1&gt;
&lt;p&gt;naming: fractional dimension&lt;/p&gt;
&lt;h2 id=&#34;definition&#34;&gt;Definition:&lt;/h2&gt;
&lt;p&gt;self-similar $$\to$ when zoomed in, look the same&lt;/p&gt;
&lt;h2 id=&#34;types&#34;&gt;Types:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Exactly self-similar&lt;/li&gt;
&lt;li&gt;Statistically self-similar&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;exactly-self-similar&#34;&gt;Exactly Self-similar&lt;/h2&gt;
&lt;p&gt;If zoomed in, there is no way to tell that we have zoomed in.&lt;/p&gt;
&lt;h3 id=&#34;sierpinski-carpet&#34;&gt;Sierpinski Carpet&lt;/h3&gt;
&lt;p&gt;&lt;img
    src=&#34;https://powersnail.com/images/Sierpinski_carpet.jpg&#34; alt=&#34;Sierpinski Carpet&#34;
        srcset=&#34;https://powersnail.com/images/Sierpinski_carpet-400w.jpg 400w,/images/Sierpinski_carpet.jpg 600w&#34;
     width=&#34;600&#34;  height=&#34;600&#34; &gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A square divided into 9 squares&lt;/li&gt;
&lt;li&gt;The center square is empty&lt;/li&gt;
&lt;li&gt;Each other square is divided again&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;koch-snowflake&#34;&gt;Koch Snowflake&lt;/h3&gt;
&lt;p&gt;&lt;img
    src=&#34;https://powersnail.com/images/2000px-Koch_Snowflake_7th_iteration.svg.png&#34; alt=&#34;Koch Snowflake&#34;
        srcset=&#34;https://powersnail.com/images/2000px-Koch_Snowflake_7th_iteration.svg-400w.png 400w,/images/2000px-Koch_Snowflake_7th_iteration.svg-600w.png 600w,/images/2000px-Koch_Snowflake_7th_iteration.svg-800w.png 800w,/images/2000px-Koch_Snowflake_7th_iteration.svg-1000w.png 1000w,/images/2000px-Koch_Snowflake_7th_iteration.svg-1200w.png 1200w,/images/2000px-Koch_Snowflake_7th_iteration.svg.png 2000w&#34;
     width=&#34;2000&#34;  height=&#34;2000&#34; loading=&#34;lazy&#34;&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chop the lines into 3 Segments&lt;/li&gt;
&lt;li&gt;replace the middle one with equal lateral triangle&lt;/li&gt;
&lt;li&gt;Chop and replace each segment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The important property is that when we zoom in on an edge, it is arbitrarily &amp;ldquo;bumpy&amp;rdquo; - non-smooth. This is similar to things like shorelines. There is a self-similarity in natural shorelines.&lt;/p&gt;
&lt;p&gt;However, shorelines are not as bumpy as Koch Snowflakes. They are smoother. Hence, we need a concept to describe the bumpiness.&lt;/p&gt;
&lt;h3 id=&#34;length-of-koch-snowflake&#34;&gt;Length of Koch Snowflake&lt;/h3&gt;
&lt;p&gt;Each Step increases the length to $$\dfrac{4}{3} \times$ original. Hence, Koch Snowflake is infinitely long.&lt;/p&gt;
&lt;p&gt;$$l_k = \dfrac{4}{3} l_{k-1}$&lt;/p&gt;
&lt;p&gt;Question: How quickly does Koch Snowflake&amp;rsquo;s length converge to infinity?&lt;/p&gt;
&lt;h3 id=&#34;measuring-length-of-fractal-line&#34;&gt;Measuring Length of Fractal Line&lt;/h3&gt;
&lt;p&gt;Different measuring scales lead to different length.&lt;/p&gt;
&lt;p&gt;From the starting point, jump a fixed distance, $$d_u$, and measure how many $d_u$ are there in the line.&lt;/p&gt;
&lt;p&gt;Each different $$d_u$ results in a unique length, and as $d_u$ approaches 0, the length measured approaches $\infty$&lt;/p&gt;
&lt;p&gt;The scale is related to length and this function describes the bumpiness of a fractal line. This is called &lt;strong&gt;Fractal Dimension&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Higher&lt;/em&gt; Fractal Dimension means more &lt;em&gt;bumpiness&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Lower&lt;/em&gt; Fractal Dimension means less &lt;em&gt;bumpiness&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shorelinemountain-topology&#34;&gt;Shoreline/Mountain Topology&lt;/h3&gt;
&lt;p&gt;Use fractal dimension to model a bumpy line, and computationally derive the line, rather than describing more details.&lt;/p&gt;
&lt;h2 id=&#34;statistically-self-similar&#34;&gt;Statistically Self-similar&lt;/h2&gt;
&lt;p&gt;Recursive Tree: &lt;strong&gt;Tree&lt;/strong&gt; := Stick + &lt;strong&gt;Tree&lt;/strong&gt; + &lt;strong&gt;Tree&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Moreover, we need to take care of the angles, length and returning position.&lt;/p&gt;
&lt;p&gt;It becomes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- Stick
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- Turn
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- Tree  -&amp;gt; this will expand to the same routine
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- Turn
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- Tree  -&amp;gt; this will expand to the same routine
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- Turn
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- Backwards&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;l-system&#34;&gt;L-System&lt;/h3&gt;
&lt;p&gt;The above process can be described by CFG:&lt;/p&gt;
&lt;p&gt;$$T:S\leftarrow T \rightarrow \rightarrow T \leftarrow \overline{S}$&lt;/p&gt;
&lt;p&gt;This use of CFG is called L-System.&lt;/p&gt;
&lt;h3 id=&#34;improvement-to-l-system-tree&#34;&gt;Improvement to L-System Tree&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Randomness : This introduces &lt;strong&gt;Statistically similar&lt;/strong&gt; fractal image.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The sub-parts are statistically similar to the original image, but not exactly the same.&lt;/p&gt;
&lt;p&gt;To create a nice tree, it is important to examine each tree. There is a &lt;strong&gt;grammar&lt;/strong&gt; to each type of tree, describing its patterns.&lt;/p&gt;
&lt;p&gt;However, sadly trees don&amp;rsquo;t grow by the fractal model.&lt;/p&gt;
&lt;h2 id=&#34;incorporating-randomness-into-fractals&#34;&gt;Incorporating Randomness Into Fractals&lt;/h2&gt;
&lt;p&gt;Example Algorithm (&lt;em&gt;Subdivide and Offset&lt;/em&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;repeat
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    foreach segment
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        offset midpoint for random distance
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        hence create two segments&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;deeper repetition: bumpier&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More sophisticated examples:&lt;/p&gt;
&lt;h3 id=&#34;height-map&#34;&gt;Height Map&lt;/h3&gt;
&lt;p&gt;A raster vector of height&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can represent any terrain with no overlapping height (not bumpy topology, water, etc.)&lt;/li&gt;
&lt;li&gt;Cannot represent extremely rocky terrain&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Diamond Square&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img
    src=&#34;https://powersnail.com/images/2998px-Diamond_Square.svg.png&#34; alt=&#34;Level 0&#34;
        srcset=&#34;https://powersnail.com/images/2998px-Diamond_Square.svg-400w.png 400w,/images/2998px-Diamond_Square.svg-600w.png 600w,/images/2998px-Diamond_Square.svg-800w.png 800w,/images/2998px-Diamond_Square.svg-1000w.png 1000w,/images/2998px-Diamond_Square.svg-1200w.png 1200w,/images/2998px-Diamond_Square.svg.png 2998w&#34;
     width=&#34;2998&#34;  height=&#34;640&#34; loading=&#34;lazy&#34;&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Level 0: Four corners set to $$h = 0$&lt;/li&gt;
&lt;li&gt;Level 1: Mid-point $$m_1$ set to $h_1 += random$&lt;/li&gt;
&lt;li&gt;Level 2: Point on Edges aligned with $$m_1$, offset randomly&lt;/li&gt;
&lt;li&gt;Level 3: Mid-point of each sub-square, offset randomly&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result could look something like:&lt;/p&gt;
&lt;p&gt;&lt;img
    src=&#34;https://powersnail.com/images/Plasmafractal.gif&#34; alt=&#34;Diamond Square&#34;
        srcset=&#34;https://powersnail.com/images/Plasmafractal.gif 300w&#34;
     width=&#34;300&#34;  height=&#34;225&#34; loading=&#34;lazy&#34;&gt;

&lt;/p&gt;
&lt;p&gt;The problem is the grid pattern is visible. There are &amp;lsquo;+&amp;rsquo; in the graph, so rotating the graph will be noticed (not entirely natural)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: Use&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Applications&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NOT good for terrain. Natural terrain has very few local minima. The minima will drain, and become global minima. This is not reflected by diamond square subdivision.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clouds. Clouds density is similar to the patterns generated from diamond square subdivision.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dirt. This could create &amp;ldquo;dirty&amp;rdquo; texture to human-created objects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;perlin-fractal&#34;&gt;Perlin Fractal&lt;/h3&gt;
&lt;p&gt;A perlin fractal is created by taking in a height map, downsize it, and fill itself with the small height map.&lt;/p&gt;
</content>
    <category>posts</category>
  </entry>
  
</feed>
