{"mappings":"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","sources":["content/game_of_life/game_of_life.ts"],"sourcesContent":["interface Point {\n    x: number;\n    y: number;\n}\n\ninterface Rect {\n    topLeft: Point;\n    bottomRight: Point;\n}\n\nclass PointSet {\n    points: Map<number, Set<number>>;\n\n    constructor() {\n        this.points = new Map();\n    }\n\n    add(p: Point) {\n        let row = get_or_insert(this.points, p.x, () => new Set())\n        if (row.has(p.y)) {\n            return false;\n        } else {\n            row.add(p.y);\n            return true;\n        }\n    }\n\n    has(p: Point): boolean {\n        let row = this.points.get(p.x);\n        return (row !== undefined) && row.has(p.y);\n    }\n\n    count(): number {\n        let sum = 0;\n        for (const s of this.points.values()) {\n            sum += s.size;\n        }\n        return sum;\n    }\n\n    *[Symbol.iterator](): Iterator<Point> {\n        for (const [x, s] of this.points.entries()) {\n            for (const y of s) {\n                yield { x: x, y: y };\n            }\n        }\n    }\n}\n\ninterface World {\n    alive: PointSet;\n    width: number;\n    height: number;\n}\n\nfunction* neighbors(w: World, p: Point): IterableIterator<Point> {\n    yield { x: (p.x - 1 + w.width) % w.width, y: (p.y - 1 + w.height) % w.height };\n    yield { x: (p.x - 1 + w.width) % w.width, y: (p.y + w.height) % w.height };\n    yield { x: (p.x - 1 + w.width) % w.width, y: (p.y + 1 + w.height) % w.height };\n    yield { x: (p.x + w.width) % w.width, y: (p.y - 1 + w.height) % w.height };\n    yield { x: (p.x + w.width) % w.width, y: (p.y + 1 + w.height) % w.height };\n    yield { x: (p.x + 1 + w.width) % w.width, y: (p.y - 1 + w.height) % w.height };\n    yield { x: (p.x + 1 + w.width) % w.width, y: (p.y + w.height) % w.height };\n    yield { x: (p.x + 1 + w.width) % w.width, y: (p.y + 1 + w.height) % w.height };\n}\n\nfunction get_or_insert<K, V>(map: Map<K, V>, key: K, default_v: () => V): V {\n    let value = map.get(key);\n    if (value === undefined) {\n        let v = default_v()\n        map.set(key, v);\n        return v;\n    } else {\n        return value;\n    }\n}\n\nfunction step(world: World): World {\n    let number_of_neighbor: Map<number, Map<number, number>> = new Map();\n\n    for (const p of world.alive) {\n        for (const n of neighbors(world, p)) {\n            let map_ref = get_or_insert(number_of_neighbor, n.x, () => new Map())\n            let old_count = get_or_insert(map_ref, n.y, () => 0);\n            map_ref.set(n.y, old_count + 1)\n        }\n    }\n\n    let alive: PointSet = new PointSet();\n    for (const [x, row] of number_of_neighbor.entries()) {\n        for (const [y, count] of row) {\n            if (count == 3 || (count == 2 && world.alive.has({ x: x, y: y }))) {\n                alive.add({ x: x, y: y });\n            }\n        }\n    }\n\n    return {\n        alive: alive,\n        width: world.width,\n        height: world.height,\n    };\n}\n\nfunction render(world: World, canvas: HTMLCanvasElement) {\n    let dpr = window.devicePixelRatio || 1;\n    let rect = canvas.getBoundingClientRect();\n    let context = canvas.getContext(\"2d\")! as CanvasRenderingContext2D;\n\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n\n    let margin = 10;\n    let unitSize = (canvas.width - margin * 2) / world.width;\n\n    context.imageSmoothingEnabled = false;\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.fillStyle = \"#eee\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n\n    context.strokeStyle = \"#fff\";\n    for (let x = 0; x < world.width; x += 1) {\n        for (let y = 0; y < world.height; y += 1) {\n            if (world.alive.has({ x: x, y: y })) {\n                context.fillStyle = \"#333\";\n            } else {\n                context.fillStyle = \"#ccc\";\n            }\n            context.fillRect(\n                x * unitSize + margin,\n                y * unitSize + margin,\n                unitSize - 1,\n                unitSize - 1\n            );\n        }\n    }\n\n    if (world.alive.count() == 0) {\n        context.fillStyle = \"#00000044\";\n        context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n        return;\n    }\n}\n\nfunction initWorldWithBlinker(width: number, height: number): World {\n    let alive: PointSet = new PointSet();\n    alive.add({ x: -1, y: 0 });\n    alive.add({ x: 0, y: 0 });\n    alive.add({ x: 1, y: 0 });\n\n    return {\n        alive: alive,\n        width: width,\n        height: height\n    };\n}\n\nfunction initWorldRandomly(count_alive: number, width: number, height: number): World {\n    let alive: PointSet = new PointSet();\n\n    for (let n = 0; n < count_alive; n++) {\n        while (\n            !alive.add({\n                x: Math.floor(Math.random() * width),\n                y: Math.floor(Math.random() * height),\n            })\n        ) {\n            // Nothing\n        }\n    }\n\n    return {\n        alive: alive,\n        width: width,\n        height: height\n    }\n}\n\nfunction runMainLoop() {\n    let c = document.getElementById(\"mainCanvas\") as HTMLCanvasElement;\n\n    let world = initWorldRandomly(100 * 100 / 3, 100, 100);\n    // let world = initWorldWithBlinker();\n    render(world, c);\n\n    let intervalId: number = 0;\n\n    function onTimeout() {\n        world = step(world);\n        render(world, c);\n        if (world.alive.count() == 0) {\n            clearInterval(intervalId);\n        }\n    }\n\n    intervalId = setInterval(onTimeout, 100);\n}\n\nwindow.addEventListener(\"load\", function () {\n    runMainLoop();\n});\n"],"names":["$43f69b566e428372$var$PointSet","constructor","this","points","Map","add","p","row","$43f69b566e428372$var$get_or_insert","x","Set","has","y","get","undefined","count","sum","s","values","size","Symbol","iterator","entries","$43f69b566e428372$var$neighbors","w","width","height","map","key","default_v","value","v","set","$43f69b566e428372$var$render","world","canvas","dpr","window","devicePixelRatio","rect","getBoundingClientRect","context","getContext","unitSize","margin","imageSmoothingEnabled","clearRect","fillStyle","fillRect","strokeStyle","alive","$43f69b566e428372$var$runMainLoop","c","document","getElementById","count_alive","n","Math","floor","random","$43f69b566e428372$var$initWorldRandomly","intervalId","setInterval","number_of_neighbor","map_ref","old_count","$43f69b566e428372$var$step","clearInterval","addEventListener"],"version":3,"file":"game_of_life.js.map"}